<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Forge: cuda/histogram.cu</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="forge.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Forge
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('cuda_2histogram_8cu-example.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">cuda/histogram.cu</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line">/*******************************************************</div><div class="line"> * Copyright (c) 2015-2019, ArrayFire</div><div class="line"> * All rights reserved.</div><div class="line"> *</div><div class="line"> * This file is distributed under 3-clause BSD license.</div><div class="line"> * The complete license agreement can be obtained at:</div><div class="line"> * http://arrayfire.com/licenses/BSD-3-Clause</div><div class="line"> ********************************************************/</div><div class="line"></div><div class="line">#include &lt;forge.h&gt;</div><div class="line">#include &lt;cuda_runtime.h&gt;</div><div class="line">#include &lt;curand.h&gt;</div><div class="line">#include &lt;curand_kernel.h&gt;</div><div class="line">#include &lt;cuComplex.h&gt;</div><div class="line">#define USE_FORGE_CUDA_COPY_HELPERS</div><div class="line">#include &lt;ComputeCopy.h&gt;</div><div class="line">#include &lt;cstdio&gt;</div><div class="line"></div><div class="line">const unsigned IMGW = 256;</div><div class="line">const unsigned IMGH = 256;</div><div class="line">const unsigned DIMX = 1000;</div><div class="line">const unsigned DIMY = 800;</div><div class="line">const unsigned NBINS = 256;</div><div class="line"></div><div class="line">curandState_t* state;</div><div class="line"></div><div class="line">struct Bitmap {</div><div class="line">    unsigned char *ptr;</div><div class="line">    unsigned width;</div><div class="line">    unsigned height;</div><div class="line">};</div><div class="line"></div><div class="line">class PerlinNoise</div><div class="line">{</div><div class="line">    public:</div><div class="line">        float* base;</div><div class="line">        float* perlin;</div><div class="line"></div><div class="line">        PerlinNoise();</div><div class="line">        ~PerlinNoise();</div><div class="line">        void generateNoise();</div><div class="line">};</div><div class="line"></div><div class="line">Bitmap createBitmap(unsigned w, unsigned h);</div><div class="line"></div><div class="line">void destroyBitmap(Bitmap&amp; bmp);</div><div class="line"></div><div class="line">void kernel(Bitmap&amp; bmp, PerlinNoise&amp; pn);</div><div class="line"></div><div class="line">void populateBins(Bitmap&amp; bmp, int *hist_array, const unsigned nbins, float *hist_cols);</div><div class="line"></div><div class="line">__global__</div><div class="line">void setupRandomKernel(curandState *states, unsigned long long seed)</div><div class="line">{</div><div class="line">    unsigned tid = blockDim.x * blockIdx.x + threadIdx.x;</div><div class="line">    curand_init(seed, tid, 0, &amp;states[tid]);</div><div class="line">}</div><div class="line"></div><div class="line">int main(void)</div><div class="line">{</div><div class="line">    Bitmap bmp = createBitmap(IMGW, IMGH);</div><div class="line"></div><div class="line">    FORGE_CUDA_CHECK(cudaMalloc((void **)&amp;state, NBINS*sizeof(curandState_t)));</div><div class="line">    setupRandomKernel &lt;&lt;&lt; 1, NBINS &gt;&gt;&gt; (state, 314567);</div><div class="line"></div><div class="line">    /*</div><div class="line">     * First Forge call should be a window creation call</div><div class="line">     * so that necessary OpenGL context is created for any</div><div class="line">     * other forge::* object to be created successfully</div><div class="line">     */</div><div class="line">    forge::Window wnd(DIMX, DIMY, &quot;Histogram Demo&quot;);</div><div class="line">    wnd.makeCurrent();</div><div class="line"></div><div class="line">    forge::Image img(IMGW, IMGH, FG_RGBA, forge::u8);</div><div class="line"></div><div class="line">    forge::Chart chart(FG_CHART_2D);</div><div class="line"></div><div class="line">    chart.setAxesLabelFormat(&quot;%3.1f&quot;, &quot;%.2e&quot;);</div><div class="line"></div><div class="line">    /* set x axis limits to maximum and minimum values of data</div><div class="line">     * and y axis limits to range [0, number of pixels ideally]</div><div class="line">     * but practically total number of pixels as y range will skew</div><div class="line">     * the histogram graph vertically. Therefore setting it to</div><div class="line">     * 25% of total number of pixels */</div><div class="line">    chart.setAxesLimits(0, 1, 0, IMGW*IMGH/(float)(NBINS/4.0));</div><div class="line"></div><div class="line">    /*</div><div class="line">     * Create histogram object specifying number of bins</div><div class="line">     */</div><div class="line">    forge::Histogram hist = chart.histogram(NBINS, forge::s32);</div><div class="line">    /*</div><div class="line">     * Set histogram colors</div><div class="line">     */</div><div class="line">    hist.setColor(FG_YELLOW);</div><div class="line"></div><div class="line">    PerlinNoise noiseGenerator;</div><div class="line">    int *histOut;</div><div class="line">    float *histColors;</div><div class="line"></div><div class="line">    FORGE_CUDA_CHECK(cudaMalloc((void**)&amp;histOut, NBINS * sizeof(int)));</div><div class="line">    FORGE_CUDA_CHECK(cudaMalloc((void**)&amp;histColors, 3*NBINS * sizeof(float)));</div><div class="line"></div><div class="line">    GfxHandle* handles[3];</div><div class="line"></div><div class="line">    createGLBuffer(&amp;handles[0], img.pixels(), FORGE_IMAGE_BUFFER);</div><div class="line">    createGLBuffer(&amp;handles[1], hist.vertices(), FORGE_VERTEX_BUFFER);</div><div class="line">    createGLBuffer(&amp;handles[2], hist.colors(), FORGE_VERTEX_BUFFER);</div><div class="line"></div><div class="line">    unsigned frame = 0;</div><div class="line">    do {</div><div class="line">        if (frame%8==0) {</div><div class="line">            kernel(bmp, noiseGenerator);</div><div class="line">            copyToGLBuffer(handles[0], (ComputeResourceHandle)bmp.ptr, img.size());</div><div class="line"></div><div class="line">            populateBins(bmp, histOut, NBINS, histColors);</div><div class="line"></div><div class="line">            copyToGLBuffer(handles[1], (ComputeResourceHandle)histOut, hist.verticesSize());</div><div class="line">            copyToGLBuffer(handles[2], (ComputeResourceHandle)histColors, hist.colorsSize());</div><div class="line"></div><div class="line">            frame = 0;</div><div class="line">        }</div><div class="line"></div><div class="line">        /*</div><div class="line">         * Split the window into grid regions</div><div class="line">         */</div><div class="line">        wnd.draw(1, 2, 0, img,  &quot;Dynamic Perlin Noise&quot; );</div><div class="line">        wnd.draw(1, 2, 1, chart, &quot;Histogram of Noisy Image&quot;);</div><div class="line"></div><div class="line">        wnd.swapBuffers();</div><div class="line">        frame++;</div><div class="line">    } while(!wnd.close());</div><div class="line"></div><div class="line">    FORGE_CUDA_CHECK(cudaFree(histOut));</div><div class="line">    FORGE_CUDA_CHECK(cudaFree(histColors));</div><div class="line">    releaseGLBuffer(handles[0]);</div><div class="line">    releaseGLBuffer(handles[1]);</div><div class="line">    releaseGLBuffer(handles[2]);</div><div class="line"></div><div class="line">    return 0;</div><div class="line">}</div><div class="line"></div><div class="line">Bitmap createBitmap(unsigned w, unsigned h)</div><div class="line">{</div><div class="line">    Bitmap retVal;</div><div class="line">    retVal.width = w;</div><div class="line">    retVal.height= h;</div><div class="line">    FORGE_CUDA_CHECK(cudaMalloc((void**)&amp;retVal.ptr, sizeof(unsigned char)*4*w*h));</div><div class="line">    return retVal;</div><div class="line">}</div><div class="line"></div><div class="line">void destroyBitmap(Bitmap&amp; bmp)</div><div class="line">{</div><div class="line">    FORGE_CUDA_CHECK(cudaFree(bmp.ptr));</div><div class="line">}</div><div class="line"></div><div class="line">PerlinNoise::PerlinNoise()</div><div class="line">{</div><div class="line">    const size_t IMG_SIZE = IMGW*IMGH*sizeof(float);</div><div class="line"></div><div class="line">    FORGE_CUDA_CHECK(cudaMalloc((void**)&amp;base, IMG_SIZE));</div><div class="line">    FORGE_CUDA_CHECK(cudaMalloc((void**)&amp;perlin, IMG_SIZE));</div><div class="line">}</div><div class="line"></div><div class="line">PerlinNoise::~PerlinNoise()</div><div class="line">{</div><div class="line">    FORGE_CUDA_CHECK(cudaFree(base));</div><div class="line">    FORGE_CUDA_CHECK(cudaFree(perlin));</div><div class="line">}</div><div class="line"></div><div class="line">inline</div><div class="line">int divup(int a, int b)</div><div class="line">{</div><div class="line">    return (a+b-1)/b;</div><div class="line">}</div><div class="line"></div><div class="line">__device__</div><div class="line">float interp(float x0, float x1, float alpha)</div><div class="line">{</div><div class="line">    return x0 * (1 - alpha) + alpha * x1;</div><div class="line">}</div><div class="line"></div><div class="line">__global__</div><div class="line">void perlinInitKernel(float* base, float* perlin, curandState* state)</div><div class="line">{</div><div class="line">    int x = blockIdx.x * blockDim.x  + threadIdx.x;</div><div class="line">    int y = blockIdx.y * blockDim.y  + threadIdx.y;</div><div class="line"></div><div class="line">    if (x&lt;IMGW &amp;&amp; y&lt;IMGH) {</div><div class="line">        int index = y*IMGW + x;</div><div class="line">        base[index] = curand_uniform(&amp;state[index%NBINS]);</div><div class="line">        perlin[index] = 0.0f;</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">__global__</div><div class="line">void perlinComputeKernel(float* perlin, float* base, float amp, int period)</div><div class="line">{</div><div class="line">    unsigned x = blockIdx.x * blockDim.x  + threadIdx.x;</div><div class="line">    unsigned y = blockIdx.y * blockDim.y  + threadIdx.y;</div><div class="line"></div><div class="line">    if (x&lt;IMGW &amp;&amp; y&lt;IMGH) {</div><div class="line">        int index  = y*IMGW + x;</div><div class="line"></div><div class="line">        float freq = 1.0f / period;</div><div class="line"></div><div class="line">        int si0 = (x/period) * period;</div><div class="line">        int si1 = (si0 + period) % IMGW;</div><div class="line">        float hblend = (x - si0) * freq;</div><div class="line"></div><div class="line">        int sj0 = (y/period) * period;</div><div class="line">        int sj1 = (sj0 + period) % IMGH;</div><div class="line">        float vblend = (y - sj0) * freq;</div><div class="line"></div><div class="line">        float top = interp(base[si0+IMGW*sj0], base[si1+IMGW*sj0], hblend);</div><div class="line">        float bot = interp(base[si0+IMGW*sj1], base[si1+IMGW*sj1], hblend);</div><div class="line"></div><div class="line">        perlin[index] += (amp * interp(top, bot, vblend));</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">__global__</div><div class="line">void perlinNormalize(float* perlin, float tamp)</div><div class="line">{</div><div class="line">    int x = blockIdx.x * blockDim.x  + threadIdx.x;</div><div class="line">    int y = blockIdx.y * blockDim.y  + threadIdx.y;</div><div class="line"></div><div class="line">    if (x&lt;IMGW &amp;&amp; y&lt;IMGH) {</div><div class="line">        int index = y*IMGW + x;</div><div class="line">        perlin[index] = perlin[index]/tamp;</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">void PerlinNoise::generateNoise()</div><div class="line">{</div><div class="line">    static dim3 threads(32, 8);</div><div class="line">    dim3 blocks(divup(IMGW, threads.x), divup(IMGH, threads.y));</div><div class="line"></div><div class="line">    float persistence = 0.5f;</div><div class="line">    float amp  = 1.0f;</div><div class="line">    float tamp = 0.0f;</div><div class="line"></div><div class="line">    perlinInitKernel&lt;&lt;&lt; blocks, threads &gt;&gt;&gt; (base, perlin, state);</div><div class="line"></div><div class="line">    for (int octave=6; octave&gt;=0; --octave) {</div><div class="line">        int period = 1 &lt;&lt; octave;</div><div class="line"></div><div class="line">        perlinComputeKernel&lt;&lt;&lt; blocks, threads &gt;&gt;&gt;(perlin, base, amp, period);</div><div class="line"></div><div class="line">        tamp += amp;</div><div class="line">        amp *= persistence;</div><div class="line">    }</div><div class="line"></div><div class="line">    perlinNormalize&lt;&lt;&lt; blocks, threads &gt;&gt;&gt;(perlin, tamp);</div><div class="line">}</div><div class="line"></div><div class="line">__global__</div><div class="line">void fillImageKernel(unsigned char* ptr, unsigned width, unsigned height, float* perlin)</div><div class="line">{</div><div class="line">    int x = blockIdx.x * blockDim.x  + threadIdx.x;</div><div class="line">    int y = blockIdx.y * blockDim.y  + threadIdx.y;</div><div class="line"></div><div class="line">    if (x&lt;width &amp;&amp; y&lt;height) {</div><div class="line">        int offset  = x + y * width;</div><div class="line"></div><div class="line">        unsigned u = (unsigned)(IMGW*x/(float)(width));</div><div class="line">        unsigned v = (unsigned)(IMGH*y/(float)(height));</div><div class="line">        int idx = u + v*IMGW;</div><div class="line"></div><div class="line">        unsigned char val = 255 * perlin[idx];</div><div class="line">        ptr[offset*4 + 0] = val;</div><div class="line">        ptr[offset*4 + 1] = val;</div><div class="line">        ptr[offset*4 + 2] = val;</div><div class="line">        ptr[offset*4 + 3] = 255;</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">void kernel(Bitmap&amp; bmp, PerlinNoise&amp; pn)</div><div class="line">{</div><div class="line">    static dim3 threads(32, 8);</div><div class="line"></div><div class="line">    pn.generateNoise();</div><div class="line"></div><div class="line">    dim3 blocks(divup(bmp.width, threads.x), divup(bmp.height, threads.y));</div><div class="line"></div><div class="line">    fillImageKernel&lt;&lt;&lt; blocks, threads &gt;&gt;&gt;(bmp.ptr, bmp.width, bmp.height, pn.perlin);</div><div class="line">}</div><div class="line"></div><div class="line">__global__</div><div class="line">void histogramKernel(const unsigned char* perlinNoise, int* histOut, const unsigned nbins)</div><div class="line">{</div><div class="line">    int x = blockIdx.x * blockDim.x  + threadIdx.x;</div><div class="line">    int y = blockIdx.y * blockDim.y  + threadIdx.y;</div><div class="line"></div><div class="line">    if (x&lt;IMGW &amp;&amp; y&lt;IMGH) {</div><div class="line">        int offset  = y * IMGW + x;</div><div class="line">        unsigned char noiseVal = perlinNoise[offset*4 + 0];</div><div class="line">        offset = __float2int_rd(nbins * (__int2float_rd(noiseVal)/255.f));</div><div class="line">        atomicAdd(histOut + offset , 1);</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">__global__</div><div class="line">void histColorsKernel(float* histColors, curandState *states)</div><div class="line">{</div><div class="line">    int bin = blockIdx.x * blockDim.x  + threadIdx.x;</div><div class="line"></div><div class="line">    histColors[3*bin+0] = curand_uniform(&amp;states[bin]);</div><div class="line">    histColors[3*bin+1] = curand_uniform(&amp;states[bin]);</div><div class="line">    histColors[3*bin+2] = curand_uniform(&amp;states[bin]);</div><div class="line">}</div><div class="line"></div><div class="line">void populateBins(Bitmap&amp; bmp, int *histOut, const unsigned nbins, float *histColors)</div><div class="line">{</div><div class="line">    static const dim3 threads(8, 8);</div><div class="line">    dim3 blocks(divup(bmp.width, threads.x),</div><div class="line">                divup(bmp.height, threads.y));</div><div class="line"></div><div class="line">    cudaMemset(histOut, 0, nbins * sizeof(int));</div><div class="line"></div><div class="line">    histogramKernel&lt;&lt;&lt; blocks, threads &gt;&gt;&gt;(bmp.ptr, histOut, nbins);</div><div class="line"></div><div class="line">    histColorsKernel&lt;&lt;&lt; 1, nbins &gt;&gt;&gt;(histColors, state);</div><div class="line">}</div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Thu May 18 2017 10:55:58 for Forge by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
