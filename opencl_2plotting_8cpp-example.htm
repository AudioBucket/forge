<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Forge: opencl/plotting.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="forge.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Forge
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('opencl_2plotting_8cpp-example.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">opencl/plotting.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div><div class="line"><span class="comment"> * Copyright (c) 2015-2019, ArrayFire</span></div><div class="line"><span class="comment"> * All rights reserved.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div><div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div><div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div><div class="line"><span class="comment"> ********************************************************/</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="forge_8h.htm">forge.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &quot;cl_helpers.h&quot;</span></div><div class="line"><span class="preprocessor">#include &lt;mutex&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;iterator&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using namespace </span>cl;</div><div class="line"><span class="keyword">using namespace </span>std;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> DIMX = 1000;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> DIMY = 800;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keywordtype">float</span>    dx = 0.1;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">float</span>    FRANGE_START = 0.f;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">float</span>    FRANGE_END = 2 * 3.141592f;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> DATA_SIZE = ( FRANGE_END - FRANGE_START ) / dx;</div><div class="line"></div><div class="line"><span class="preprocessor">#define USE_FORGE_OPENCL_COPY_HELPERS</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="ComputeCopy_8h.htm">ComputeCopy.h</a>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> std::string sinf_ocl_kernel = R<span class="stringliteral">&quot;(</span></div><div class="line"><span class="stringliteral">kernel void sinf(global float* out, const float dx, const unsigned DATA_SIZE, int fnCode)</span></div><div class="line"><span class="stringliteral">{</span></div><div class="line"><span class="stringliteral">    unsigned x = get_global_id(0);</span></div><div class="line"><span class="stringliteral">    if(x &lt; DATA_SIZE) {</span></div><div class="line"><span class="stringliteral">        out[2 * x] = x * dx ;</span></div><div class="line"><span class="stringliteral">        switch(fnCode) {</span></div><div class="line"><span class="stringliteral">            case 0:</span></div><div class="line"><span class="stringliteral">                out[ 2 * x + 1 ] = sin(x*dx);</span></div><div class="line"><span class="stringliteral">                break;</span></div><div class="line"><span class="stringliteral">            case 1:</span></div><div class="line"><span class="stringliteral">                out[ 2 * x + 1 ] = cos(x*dx);</span></div><div class="line"><span class="stringliteral">                break;</span></div><div class="line"><span class="stringliteral">            case 2:</span></div><div class="line"><span class="stringliteral">                out[ 2 * x + 1 ] = tan(x*dx);</span></div><div class="line"><span class="stringliteral">                break;</span></div><div class="line"><span class="stringliteral">            case 3:</span></div><div class="line"><span class="stringliteral">                out[ 2 * x + 1 ] = log10(x*dx);</span></div><div class="line"><span class="stringliteral">                break;</span></div><div class="line"><span class="stringliteral">        }</span></div><div class="line"><span class="stringliteral">    }</span></div><div class="line"><span class="stringliteral">}</span></div><div class="line"><span class="stringliteral">)&quot;;</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral"></span><span class="keywordtype">void</span> kernel(cl::Buffer&amp; devOut, cl::CommandQueue&amp; queue, <span class="keywordtype">int</span> fnCode)</div><div class="line">{</div><div class="line">    <span class="keyword">static</span> std::once_flag   compileFlag;</div><div class="line">    <span class="keyword">static</span> cl::Program      prog;</div><div class="line">    <span class="keyword">static</span> cl::Kernel       kern;</div><div class="line"></div><div class="line">    std::call_once(compileFlag,</div><div class="line">        [queue]() {</div><div class="line">        prog = cl::Program(queue.getInfo&lt;CL_QUEUE_CONTEXT&gt;(), sinf_ocl_kernel, <span class="keyword">true</span>);</div><div class="line">            kern = cl::Kernel(prog, <span class="stringliteral">&quot;sinf&quot;</span>);</div><div class="line">        });</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> NDRange global(DATA_SIZE * 2);</div><div class="line"></div><div class="line">    kern.setArg(0, devOut);</div><div class="line">    kern.setArg(1, dx);</div><div class="line">    kern.setArg(2, DATA_SIZE);</div><div class="line">    kern.setArg(3, fnCode);</div><div class="line">    queue.enqueueNDRangeKernel(kern, cl::NullRange, global);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <span class="keywordflow">try</span> {</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">        * First Forge call should be a window creation call</span></div><div class="line"><span class="comment">        * so that necessary OpenGL context is created for any</span></div><div class="line"><span class="comment">        * other forge::* object to be created successfully</span></div><div class="line"><span class="comment">        */</span></div><div class="line">        <a name="_a0"></a><a class="code" href="classforge_1_1Window.htm">forge::Window</a> wnd(DIMX, DIMY, <span class="stringliteral">&quot;Plotting Demo&quot;</span>);</div><div class="line">        wnd.<a name="a1"></a><a class="code" href="classforge_1_1Window.htm#afdc06d5b1652d4ae491be94d3edc5a6f">makeCurrent</a>();</div><div class="line"></div><div class="line">        <a name="_a2"></a><a class="code" href="classforge_1_1Chart.htm">forge::Chart</a> chart(<a name="a3"></a><a class="code" href="defines_8h.htm#af4e160ad397b0c0d8271fab83e2441dbab26b9da5cbdafc88a47bbe067b74924c">FG_CHART_2D</a>);</div><div class="line">        chart.<a name="a4"></a><a class="code" href="classforge_1_1Chart.htm#a88e6960288c03aecbc6d47ef92cbec02">setAxesLimits</a>(FRANGE_START, FRANGE_END, -1.0f, 1.0f);</div><div class="line"></div><div class="line">        <span class="comment">/* Create several plot objects which creates the necessary</span></div><div class="line"><span class="comment">         * vertex buffer objects to hold the different plot types</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <a name="_a5"></a><a class="code" href="classforge_1_1Plot.htm">forge::Plot</a> plt0 = chart.<a name="a6"></a><a class="code" href="classforge_1_1Chart.htm#a8e7caa3cd226b829bd4c1ca5a938bec6">plot</a>(DATA_SIZE, <a name="a7"></a><a class="code" href="namespaceforge.htm#acfe99d230e216901bd782cc580e4e815a82ea90203678bdd0b547068f0a76524b">forge::f32</a>);                                 <span class="comment">//create a default plot</span></div><div class="line">        <a class="code" href="classforge_1_1Plot.htm">forge::Plot</a> plt1 = chart.<a class="code" href="classforge_1_1Chart.htm#a8e7caa3cd226b829bd4c1ca5a938bec6">plot</a>(DATA_SIZE, <a class="code" href="namespaceforge.htm#acfe99d230e216901bd782cc580e4e815a82ea90203678bdd0b547068f0a76524b">forge::f32</a>, <a name="a8"></a><a class="code" href="defines_8h.htm#a3bc618792ca52006bf96800b9bd4050daf73d0173ca8c7039427474c4dbbb7dec">FG_PLOT_LINE</a>, <a name="a9"></a><a class="code" href="defines_8h.htm#a4e31a5f495100699e2478393e158d971a8cfe97478dc1f9f7412f7cbbedc7c59d">FG_MARKER_NONE</a>);       <span class="comment">//or specify a specific plot type</span></div><div class="line">        <a class="code" href="classforge_1_1Plot.htm">forge::Plot</a> plt2 = chart.<a class="code" href="classforge_1_1Chart.htm#a8e7caa3cd226b829bd4c1ca5a938bec6">plot</a>(DATA_SIZE, <a class="code" href="namespaceforge.htm#acfe99d230e216901bd782cc580e4e815a82ea90203678bdd0b547068f0a76524b">forge::f32</a>, <a class="code" href="defines_8h.htm#a3bc618792ca52006bf96800b9bd4050daf73d0173ca8c7039427474c4dbbb7dec">FG_PLOT_LINE</a>, <a name="a10"></a><a class="code" href="defines_8h.htm#a4e31a5f495100699e2478393e158d971ab0caed65a273eff83028976846adf44b">FG_MARKER_TRIANGLE</a>);   <span class="comment">//last parameter specifies marker shape</span></div><div class="line">        <a class="code" href="classforge_1_1Plot.htm">forge::Plot</a> plt3 = chart.<a class="code" href="classforge_1_1Chart.htm#a8e7caa3cd226b829bd4c1ca5a938bec6">plot</a>(DATA_SIZE, <a class="code" href="namespaceforge.htm#acfe99d230e216901bd782cc580e4e815a82ea90203678bdd0b547068f0a76524b">forge::f32</a>, <a name="a11"></a><a class="code" href="defines_8h.htm#a3bc618792ca52006bf96800b9bd4050da20bb0cf35cb4efe48747b561224e799f">FG_PLOT_SCATTER</a>, <a name="a12"></a><a class="code" href="defines_8h.htm#a4e31a5f495100699e2478393e158d971acdf4f46884ec2d3ff6ac8bdd9ad4e374">FG_MARKER_CROSS</a>);</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Set plot colors</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        plt0.<a name="a13"></a><a class="code" href="classforge_1_1Plot.htm#a8e14e7f09511e4042e65b78e5b0ba0fc">setColor</a>(<a name="a14"></a><a class="code" href="defines_8h.htm#aa65cea65b505b5bb5946acdcb3e6bc38aa2cf8cb5bc8e973e30ac349a20b3e965">FG_RED</a>);</div><div class="line">        plt1.<a class="code" href="classforge_1_1Plot.htm#a8e14e7f09511e4042e65b78e5b0ba0fc">setColor</a>(<a name="a15"></a><a class="code" href="defines_8h.htm#aa65cea65b505b5bb5946acdcb3e6bc38aaf559ecdf155138ce18d1e2d008b7b9c">FG_BLUE</a>);</div><div class="line">        plt2.<a class="code" href="classforge_1_1Plot.htm#a8e14e7f09511e4042e65b78e5b0ba0fc">setColor</a>(<a name="a16"></a><a class="code" href="defines_8h.htm#aa65cea65b505b5bb5946acdcb3e6bc38adb4ad5c8d9213ad8901d48c166d780bd">FG_YELLOW</a>);            <span class="comment">//use a forge predefined color</span></div><div class="line">        plt3.<a class="code" href="classforge_1_1Plot.htm#a8e14e7f09511e4042e65b78e5b0ba0fc">setColor</a>((<a class="code" href="defines_8h.htm#aa65cea65b505b5bb5946acdcb3e6bc38">forge::Color</a>) 0x257973FF);  <span class="comment">//or any hex-valued color</span></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Set plot legends</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        plt0.<a name="a17"></a><a class="code" href="classforge_1_1Plot.htm#a841659a9bd508773863b33efaa4e2cf5">setLegend</a>(<span class="stringliteral">&quot;Sine&quot;</span>);</div><div class="line">        plt1.<a class="code" href="classforge_1_1Plot.htm#a841659a9bd508773863b33efaa4e2cf5">setLegend</a>(<span class="stringliteral">&quot;Cosine&quot;</span>);</div><div class="line">        plt2.<a class="code" href="classforge_1_1Plot.htm#a841659a9bd508773863b33efaa4e2cf5">setLegend</a>(<span class="stringliteral">&quot;Tangent&quot;</span>);</div><div class="line">        plt3.<a class="code" href="classforge_1_1Plot.htm#a841659a9bd508773863b33efaa4e2cf5">setLegend</a>(<span class="stringliteral">&quot;Log base 10&quot;</span>);</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Helper function to create a CLGL interop context.</span></div><div class="line"><span class="comment">         * This function checks for if the extension is available</span></div><div class="line"><span class="comment">         * and creates the context on the appropriate device.</span></div><div class="line"><span class="comment">         * Note: context and queue are defined in cl_helpers.h</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        context = createCLGLContext(wnd);</div><div class="line">        Device device = context.getInfo&lt;CL_CONTEXT_DEVICES&gt;()[0];</div><div class="line">        queue = CommandQueue(context, device);</div><div class="line"></div><div class="line">        cl::Buffer sinOut(context, CL_MEM_READ_WRITE, <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>) * DATA_SIZE * 2);</div><div class="line">        cl::Buffer cosOut(context, CL_MEM_READ_WRITE, <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>) * DATA_SIZE * 2);</div><div class="line">        cl::Buffer tanOut(context, CL_MEM_READ_WRITE, <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>) * DATA_SIZE * 2);</div><div class="line">        cl::Buffer logOut(context, CL_MEM_READ_WRITE, <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>) * DATA_SIZE * 2);</div><div class="line">        kernel(sinOut, queue, 0);</div><div class="line">        kernel(cosOut, queue, 1);</div><div class="line">        kernel(tanOut, queue, 2);</div><div class="line">        kernel(logOut, queue, 3);</div><div class="line"></div><div class="line">        <a name="_a18"></a><a class="code" href="structGfxHandle.htm">GfxHandle</a>* handles[4];</div><div class="line">        createGLBuffer(&amp;handles[0], plt0.<a name="a19"></a><a class="code" href="classforge_1_1Plot.htm#aaa2e743d9764f9443bf4b8ea62805de8">vertices</a>(), <a name="a20"></a><a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>);</div><div class="line">        createGLBuffer(&amp;handles[1], plt1.<a class="code" href="classforge_1_1Plot.htm#aaa2e743d9764f9443bf4b8ea62805de8">vertices</a>(), <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>);</div><div class="line">        createGLBuffer(&amp;handles[2], plt2.<a class="code" href="classforge_1_1Plot.htm#aaa2e743d9764f9443bf4b8ea62805de8">vertices</a>(), <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>);</div><div class="line">        createGLBuffer(&amp;handles[3], plt3.<a class="code" href="classforge_1_1Plot.htm#aaa2e743d9764f9443bf4b8ea62805de8">vertices</a>(), <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>);</div><div class="line">        <span class="comment">/* copy your data into the vertex buffer object exposed by</span></div><div class="line"><span class="comment">         * forge::Plot class and then proceed to rendering.</span></div><div class="line"><span class="comment">         * To help the users with copying the data from compute</span></div><div class="line"><span class="comment">         * memory to display memory, Forge provides copy headers</span></div><div class="line"><span class="comment">         * along with the library to help with this task</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        copyToGLBuffer(handles[0], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)sinOut(), plt0.<a name="a21"></a><a class="code" href="classforge_1_1Plot.htm#a0a7be986ade6c80d40292308006af406">verticesSize</a>());</div><div class="line">        copyToGLBuffer(handles[1], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)cosOut(), plt1.<a class="code" href="classforge_1_1Plot.htm#a0a7be986ade6c80d40292308006af406">verticesSize</a>());</div><div class="line">        copyToGLBuffer(handles[2], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)tanOut(), plt2.<a class="code" href="classforge_1_1Plot.htm#a0a7be986ade6c80d40292308006af406">verticesSize</a>());</div><div class="line">        copyToGLBuffer(handles[3], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)logOut(), plt3.<a class="code" href="classforge_1_1Plot.htm#a0a7be986ade6c80d40292308006af406">verticesSize</a>());</div><div class="line"></div><div class="line">        <span class="keywordflow">do</span> {</div><div class="line">            wnd.<a name="a22"></a><a class="code" href="classforge_1_1Window.htm#a5d3ed7b3fed2fb9d0f8ce0a44b487755">draw</a>(chart);</div><div class="line">        } <span class="keywordflow">while</span>(!wnd.<a name="a23"></a><a class="code" href="classforge_1_1Window.htm#a800cef45e6604024ba71700cf036baae">close</a>());</div><div class="line"></div><div class="line">        releaseGLBuffer(handles[0]);</div><div class="line">        releaseGLBuffer(handles[1]);</div><div class="line">        releaseGLBuffer(handles[2]);</div><div class="line">        releaseGLBuffer(handles[3]);</div><div class="line"></div><div class="line">    }<span class="keywordflow">catch</span> (<a name="_a24"></a><a class="code" href="classforge_1_1Error.htm">forge::Error</a> err) {</div><div class="line">        std::cout &lt;&lt; err.<a name="a25"></a><a class="code" href="classforge_1_1Error.htm#aff06f49065b54a8a86e02e9a2441a8ba">what</a>() &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; err.<a name="a26"></a><a class="code" href="classforge_1_1Error.htm#a2024c05f6fc6a9077fe66d857e22fcd7">err</a>() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;</div><div class="line">    } <span class="keywordflow">catch</span> (cl::Error err) {</div><div class="line">        std::cout &lt;&lt; err.what() &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; err.err() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;</div><div class="line">    }</div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Thu May 18 2017 10:55:58 for Forge by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
