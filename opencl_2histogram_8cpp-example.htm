<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Forge: opencl/histogram.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="forge.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Forge
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('opencl_2histogram_8cpp-example.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">opencl/histogram.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div><div class="line"><span class="comment"> * Copyright (c) 2015-2019, ArrayFire</span></div><div class="line"><span class="comment"> * All rights reserved.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div><div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div><div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div><div class="line"><span class="comment"> ********************************************************/</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="forge_8h.htm">forge.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &quot;cl_helpers.h&quot;</span></div><div class="line"><span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;ctime&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;iterator&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using namespace </span>cl;</div><div class="line"><span class="keyword">using namespace </span>std;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> IMGW = 256;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> IMGH = 256;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> DIMX = 1000;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> DIMY = 800;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> IMG_SIZE = IMGW * IMGH * 4;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> WIN_ROWS = 1;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> WIN_COLS = 2;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> NBINS = 256;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">float</span> PERSISTENCE = 0.5f;</div><div class="line"></div><div class="line"><span class="preprocessor">#define USE_FORGE_OPENCL_COPY_HELPERS</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="ComputeCopy_8h.htm">ComputeCopy.h</a>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> std::string perlinKernels =</div><div class="line">R<span class="stringliteral">&quot;EOK(</span></div><div class="line"><span class="stringliteral">float rand(int x)</span></div><div class="line"><span class="stringliteral">{</span></div><div class="line"><span class="stringliteral">    x = (x &lt;&lt; 13) ^ x;</span></div><div class="line"><span class="stringliteral">    return ( 1.0 - ( (x * (x * x * 15731 + 789221) + 1376312589) &amp; 0x7fffffff) / 1073741824.0);</span></div><div class="line"><span class="stringliteral">}</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">float interp(float x0, float x1, float t)</span></div><div class="line"><span class="stringliteral">{</span></div><div class="line"><span class="stringliteral">    return x0 + (x1 - x0) * t;</span></div><div class="line"><span class="stringliteral">}</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">kernel</span></div><div class="line"><span class="stringliteral">void init(global float* base, global float* perlin, int IMGW, int IMGH, int randSeed)</span></div><div class="line"><span class="stringliteral">{</span></div><div class="line"><span class="stringliteral">    int x = get_global_id(0);</span></div><div class="line"><span class="stringliteral">    int y = get_global_id(1);</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">    if (x&lt;IMGW &amp;&amp; y&lt;IMGH) {</span></div><div class="line"><span class="stringliteral">        int i = x + y * IMGW;</span></div><div class="line"><span class="stringliteral">        base[i] = (1+rand(randSeed * i))/2.0f;</span></div><div class="line"><span class="stringliteral">        perlin[i] = 0.0f;</span></div><div class="line"><span class="stringliteral">    }</span></div><div class="line"><span class="stringliteral">}</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">kernel</span></div><div class="line"><span class="stringliteral">void compute(global float* perlin, global float* base,</span></div><div class="line"><span class="stringliteral">             unsigned IMGW, unsigned IMGH, float amp, int period)</span></div><div class="line"><span class="stringliteral">{</span></div><div class="line"><span class="stringliteral">    int x = get_global_id(0);</span></div><div class="line"><span class="stringliteral">    int y = get_global_id(1);</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">    if (x&lt;IMGW &amp;&amp; y&lt;IMGH) {</span></div><div class="line"><span class="stringliteral">        int index  = y*IMGW + x;</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">        float freq = 1.0f / period;</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">        int si0 = (x/period) * period;</span></div><div class="line"><span class="stringliteral">        int si1 = (si0 + period) % IMGW;</span></div><div class="line"><span class="stringliteral">        float hblend = (x - si0) * freq;</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">        int sj0 = (y/period) * period;</span></div><div class="line"><span class="stringliteral">        int sj1 = (sj0 + period) % IMGH;</span></div><div class="line"><span class="stringliteral">        float vblend = (y - sj0) * freq;</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">        float top = interp(base[si0+IMGW*sj0], base[si1+IMGW*sj0], hblend);</span></div><div class="line"><span class="stringliteral">        float bot = interp(base[si0+IMGW*sj1], base[si1+IMGW*sj1], hblend);</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">        perlin[index] += (amp * interp(top, bot, vblend));</span></div><div class="line"><span class="stringliteral">    }</span></div><div class="line"><span class="stringliteral">}</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">kernel</span></div><div class="line"><span class="stringliteral">void normalizeNoise(global float* perlin, unsigned IMGW, unsigned IMGH, float tamp)</span></div><div class="line"><span class="stringliteral">{</span></div><div class="line"><span class="stringliteral">    int x = get_global_id(0);</span></div><div class="line"><span class="stringliteral">    int y = get_global_id(1);</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">    if (x&lt;IMGW &amp;&amp; y&lt;IMGH) {</span></div><div class="line"><span class="stringliteral">        int index = y*IMGW + x;</span></div><div class="line"><span class="stringliteral">        perlin[index] = perlin[index]/tamp;</span></div><div class="line"><span class="stringliteral">    }</span></div><div class="line"><span class="stringliteral">}</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">kernel</span></div><div class="line"><span class="stringliteral">void fillImage(global unsigned char* ptr, unsigned width, unsigned height,</span></div><div class="line"><span class="stringliteral">               global float* perlin, unsigned IMGW, unsigned IMGH)</span></div><div class="line"><span class="stringliteral">{</span></div><div class="line"><span class="stringliteral">    int x = get_global_id(0);</span></div><div class="line"><span class="stringliteral">    int y = get_global_id(1);</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">    if (x&lt;width &amp;&amp; y&lt;height) {</span></div><div class="line"><span class="stringliteral">        int offset  = x + y * width;</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">        unsigned u = (unsigned)(IMGW*x/(float)(width));</span></div><div class="line"><span class="stringliteral">        unsigned v = (unsigned)(IMGH*y/(float)(height));</span></div><div class="line"><span class="stringliteral">        int idx = u + v*IMGW;</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">        unsigned char val = 255 * perlin[idx];</span></div><div class="line"><span class="stringliteral">        ptr[offset*4 + 0] = val;</span></div><div class="line"><span class="stringliteral">        ptr[offset*4 + 1] = val;</span></div><div class="line"><span class="stringliteral">        ptr[offset*4 + 2] = val;</span></div><div class="line"><span class="stringliteral">        ptr[offset*4 + 3] = 255;</span></div><div class="line"><span class="stringliteral">    }</span></div><div class="line"><span class="stringliteral">}</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">kernel</span></div><div class="line"><span class="stringliteral">void memSet(global int* out, unsigned len)</span></div><div class="line"><span class="stringliteral">{</span></div><div class="line"><span class="stringliteral">    if (get_global_id(0)&lt;len)</span></div><div class="line"><span class="stringliteral">        out[get_global_id(0)] = 0;</span></div><div class="line"><span class="stringliteral">}</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">kernel</span></div><div class="line"><span class="stringliteral">void histogram(const global unsigned char* perlinNoise, global int* histOut,</span></div><div class="line"><span class="stringliteral">               const unsigned w, const unsigned h, const unsigned nbins)</span></div><div class="line"><span class="stringliteral">{</span></div><div class="line"><span class="stringliteral">    int x = get_global_id(0);</span></div><div class="line"><span class="stringliteral">    int y = get_global_id(1);</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">    if (x&lt;w &amp;&amp; y&lt;h) {</span></div><div class="line"><span class="stringliteral">        int offset  = y * w + x;</span></div><div class="line"><span class="stringliteral">        unsigned char noiseVal = perlinNoise[offset*4 + 0];</span></div><div class="line"><span class="stringliteral">        offset = (int)(nbins * (noiseVal/255.f));</span></div><div class="line"><span class="stringliteral">        atomic_add(histOut + offset , 1);</span></div><div class="line"><span class="stringliteral">    }</span></div><div class="line"><span class="stringliteral">}</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">kernel</span></div><div class="line"><span class="stringliteral">void setColors(global float* out, unsigned rseed, unsigned gseed, unsigned bseed)</span></div><div class="line"><span class="stringliteral">{</span></div><div class="line"><span class="stringliteral">    int i = get_global_id(0);</span></div><div class="line"><span class="stringliteral">    out[3*i+0] = (1+rand(rseed * i))/2.0f;</span></div><div class="line"><span class="stringliteral">    out[3*i+1] = (1+rand(gseed * i))/2.0f;</span></div><div class="line"><span class="stringliteral">    out[3*i+2] = (1+rand(bseed * i))/2.0f;</span></div><div class="line"><span class="stringliteral">};</span></div><div class="line"><span class="stringliteral">)EOK&quot;;</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral"></span><span class="keyword">inline</span></div><div class="line"><span class="keywordtype">int</span> divup(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b)</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> (a+b-1)/b;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">void</span> kernel(cl::Buffer&amp; image, cl::Buffer&amp; base, cl::Buffer&amp; perlin,</div><div class="line">            cl::Buffer&amp; histOut, cl::Buffer&amp; colors,</div><div class="line">            cl::CommandQueue&amp; queue, cl::Device&amp; device)</div><div class="line">{</div><div class="line">    <span class="keyword">static</span> <span class="keywordtype">bool</span> compileFlag = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">static</span> cl::Program prog;</div><div class="line">    <span class="keyword">static</span> cl::Kernel  initKernel, computeKernel, normKernel, fillKernel;</div><div class="line">    <span class="keyword">static</span> cl::Kernel  memSetKernel, genHistogram, genHistColors;</div><div class="line"></div><div class="line">    std::srand(std::time(0));</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (compileFlag) {</div><div class="line">        <span class="keywordflow">try</span> {</div><div class="line">            prog = cl::Program(queue.getInfo&lt;CL_QUEUE_CONTEXT&gt;(), perlinKernels, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">            std::vector&lt;cl::Device&gt; devs;</div><div class="line">            devs.push_back(device);</div><div class="line">            prog.build(devs);</div><div class="line"></div><div class="line">            initKernel    = cl::Kernel(prog, <span class="stringliteral">&quot;init&quot;</span>);</div><div class="line">            computeKernel = cl::Kernel(prog, <span class="stringliteral">&quot;compute&quot;</span>);</div><div class="line">            normKernel    = cl::Kernel(prog, <span class="stringliteral">&quot;normalizeNoise&quot;</span>);</div><div class="line">            fillKernel    = cl::Kernel(prog, <span class="stringliteral">&quot;fillImage&quot;</span>);</div><div class="line">            memSetKernel  = cl::Kernel(prog, <span class="stringliteral">&quot;memSet&quot;</span>);</div><div class="line">            genHistogram  = cl::Kernel(prog, <span class="stringliteral">&quot;histogram&quot;</span>);</div><div class="line">            genHistColors = cl::Kernel(prog, <span class="stringliteral">&quot;setColors&quot;</span>);</div><div class="line">        } <span class="keywordflow">catch</span> (cl::Error err) {</div><div class="line">            std::cout &lt;&lt; <span class="stringliteral">&quot;Compile Errors: &quot;</span> &lt;&lt; std::endl;</div><div class="line">            std::cout &lt;&lt; err.what() &lt;&lt; err.err() &lt;&lt; std::endl;</div><div class="line">            std::cout &lt;&lt; prog.getBuildInfo&lt;CL_PROGRAM_BUILD_LOG&gt;(device) &lt;&lt; std::endl;</div><div class="line">            exit(255);</div><div class="line">        }</div><div class="line">        std::cout&lt;&lt; <span class="stringliteral">&quot;Kernels compiled successfully&quot;</span> &lt;&lt; std::endl;</div><div class="line">        compileFlag = <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> NDRange local(16, 16);</div><div class="line">    NDRange global(local[0] * divup(IMGW, local[0]),</div><div class="line">                   local[1] * divup(IMGH, local[1]));</div><div class="line"></div><div class="line">    <span class="keywordtype">float</span> persistence = 0.5f;</div><div class="line">    <span class="keywordtype">float</span> amp  = 1.0f;</div><div class="line">    <span class="keywordtype">float</span> tamp = 0.0f;</div><div class="line"></div><div class="line">    initKernel.setArg(0, base);</div><div class="line">    initKernel.setArg(1, perlin);</div><div class="line">    initKernel.setArg(2, IMGW);</div><div class="line">    initKernel.setArg(3, IMGH);</div><div class="line">    initKernel.setArg(4, std::rand());</div><div class="line">    queue.enqueueNDRangeKernel(initKernel, cl::NullRange, global, local);</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> octave=6; octave&gt;=0; --octave) {</div><div class="line">        <span class="keywordtype">int</span> period = 1 &lt;&lt; octave;</div><div class="line">        computeKernel.setArg(0, perlin);</div><div class="line">        computeKernel.setArg(1, base);</div><div class="line">        computeKernel.setArg(2, IMGW);</div><div class="line">        computeKernel.setArg(3, IMGH);</div><div class="line">        computeKernel.setArg(4, amp);</div><div class="line">        computeKernel.setArg(5, period);</div><div class="line">        queue.enqueueNDRangeKernel(computeKernel, cl::NullRange, global, local);</div><div class="line">        tamp += amp;</div><div class="line">        amp *= persistence;</div><div class="line">    }</div><div class="line"></div><div class="line">    normKernel.setArg(0, perlin);</div><div class="line">    normKernel.setArg(1, IMGW);</div><div class="line">    normKernel.setArg(2, IMGH);</div><div class="line">    normKernel.setArg(3, tamp);</div><div class="line">    queue.enqueueNDRangeKernel(normKernel, cl::NullRange, global, local);</div><div class="line"></div><div class="line">    fillKernel.setArg(0, image);</div><div class="line">    fillKernel.setArg(1, IMGW);</div><div class="line">    fillKernel.setArg(2, IMGH);</div><div class="line">    fillKernel.setArg(3, perlin);</div><div class="line">    fillKernel.setArg(4, IMGW);</div><div class="line">    fillKernel.setArg(5, IMGH);</div><div class="line">    queue.enqueueNDRangeKernel(fillKernel, cl::NullRange, global, local);</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> NDRange global_hist(NBINS);</div><div class="line"></div><div class="line">    memSetKernel.setArg(0, histOut);</div><div class="line">    memSetKernel.setArg(1, NBINS);</div><div class="line">    queue.enqueueNDRangeKernel(memSetKernel, cl::NullRange, global_hist);</div><div class="line"></div><div class="line">    genHistogram.setArg(0, image);</div><div class="line">    genHistogram.setArg(1, histOut);</div><div class="line">    genHistogram.setArg(2, IMGW);</div><div class="line">    genHistogram.setArg(3, IMGH);</div><div class="line">    genHistogram.setArg(4, NBINS);</div><div class="line">    queue.enqueueNDRangeKernel(genHistogram, cl::NullRange, global, local);</div><div class="line"></div><div class="line">    genHistColors.setArg(0, colors);</div><div class="line">    genHistColors.setArg(1, std::rand());</div><div class="line">    genHistColors.setArg(2, std::rand());</div><div class="line">    genHistColors.setArg(3, std::rand());</div><div class="line">    queue.enqueueNDRangeKernel(genHistColors, cl::NullRange, global_hist);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <span class="keywordflow">try</span> {</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">        * First Forge call should be a window creation call</span></div><div class="line"><span class="comment">        * so that necessary OpenGL context is created for any</span></div><div class="line"><span class="comment">        * other forge::* object to be created successfully</span></div><div class="line"><span class="comment">        */</span></div><div class="line">        <a name="_a0"></a><a class="code" href="classforge_1_1Window.htm">forge::Window</a> wnd(DIMX, DIMY, <span class="stringliteral">&quot;Histogram Demo&quot;</span>);</div><div class="line">        wnd.<a name="a1"></a><a class="code" href="classforge_1_1Window.htm#afdc06d5b1652d4ae491be94d3edc5a6f">makeCurrent</a>();</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Split the window into grid regions</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        wnd.<a name="a2"></a><a class="code" href="classforge_1_1Window.htm#a6d30b474bd7a466043ec1b3b7dd118b8">grid</a>(WIN_ROWS, WIN_COLS);</div><div class="line"></div><div class="line">        <a name="_a3"></a><a class="code" href="classforge_1_1Image.htm">forge::Image</a> img(IMGW, IMGH, <a name="a4"></a><a class="code" href="defines_8h.htm#a162f1d98558c931a93638df47cb412dba550d4ebc7407669a35a87057ac44c5e4">FG_RGBA</a>, <a name="a5"></a><a class="code" href="namespaceforge.htm#acfe99d230e216901bd782cc580e4e815afa33d5748ff04bcd920280e5a3b790c0">forge::u8</a>);</div><div class="line"></div><div class="line">        <a name="_a6"></a><a class="code" href="classforge_1_1Chart.htm">forge::Chart</a> chart(<a name="a7"></a><a class="code" href="defines_8h.htm#af4e160ad397b0c0d8271fab83e2441dbab26b9da5cbdafc88a47bbe067b74924c">FG_CHART_2D</a>);</div><div class="line">        <span class="comment">/* set x axis limits to maximum and minimum values of data</span></div><div class="line"><span class="comment">         * and y axis limits to range [0, number of pixels ideally]</span></div><div class="line"><span class="comment">         * but practically total number of pixels as y range will skew</span></div><div class="line"><span class="comment">         * the histogram graph vertically. Therefore setting it to</span></div><div class="line"><span class="comment">         * 25% of total number of pixels */</span></div><div class="line">        chart.<a name="a8"></a><a class="code" href="classforge_1_1Chart.htm#a762125729a5894b7fb533fc4151e8c4e">setAxesLimits</a>(0, 1, 0, IMGW*IMGH/(<span class="keywordtype">float</span>)(NBINS/4.0));</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Create histogram object specifying number of bins</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <a name="_a9"></a><a class="code" href="classforge_1_1Histogram.htm">forge::Histogram</a> hist = chart.<a name="a10"></a><a class="code" href="classforge_1_1Chart.htm#ad020b4df2f68ddfb4057ab1cc9dc41bc">histogram</a>(NBINS, <a name="a11"></a><a class="code" href="namespaceforge.htm#acfe99d230e216901bd782cc580e4e815a1bd64190677c261a61c640017dbaddf1">forge::s32</a>);</div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Set histogram colors</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        hist.<a name="a12"></a><a class="code" href="classforge_1_1Histogram.htm#a4223cf126e117578e63c8fd29059c78d">setColor</a>(<a name="a13"></a><a class="code" href="defines_8h.htm#aa65cea65b505b5bb5946acdcb3e6bc38adb4ad5c8d9213ad8901d48c166d780bd">FG_YELLOW</a>);</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Helper function to create a CLGL interop context.</span></div><div class="line"><span class="comment">         * This function checks for if the extension is available</span></div><div class="line"><span class="comment">         * and creates the context on the appropriate device.</span></div><div class="line"><span class="comment">         * Note: context and queue are defined in cl_helpers.h</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        context = createCLGLContext(wnd);</div><div class="line">        Device device = context.getInfo&lt;CL_CONTEXT_DEVICES&gt;()[0];</div><div class="line">        queue = CommandQueue(context, device);</div><div class="line"></div><div class="line">        cl::Buffer image(context, CL_MEM_READ_WRITE, IMG_SIZE);</div><div class="line">        cl::Buffer baseNoise(context, CL_MEM_READ_WRITE, IMG_SIZE);</div><div class="line">        cl::Buffer perlinNoise(context, CL_MEM_READ_WRITE, IMG_SIZE);</div><div class="line">        cl::Buffer histOut(context, CL_MEM_READ_WRITE, NBINS * <span class="keyword">sizeof</span>(<span class="keywordtype">int</span>));</div><div class="line">        cl::Buffer colors(context, CL_MEM_READ_WRITE, 3 * NBINS * <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>));</div><div class="line"></div><div class="line">        <a name="_a14"></a><a class="code" href="structGfxHandle.htm">GfxHandle</a>* handles[3];</div><div class="line"></div><div class="line">        createGLBuffer(&amp;handles[0], img.<a name="a15"></a><a class="code" href="classforge_1_1Image.htm#a5d27b0c5609cba2ecf65730d802c8668">pixels</a>(), <a name="a16"></a><a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa11ea1ee65fc38c2123afa0a33c6ef04a">FORGE_IMAGE_BUFFER</a>);</div><div class="line">        createGLBuffer(&amp;handles[1], hist.<a name="a17"></a><a class="code" href="classforge_1_1Histogram.htm#aaa2e743d9764f9443bf4b8ea62805de8">vertices</a>(), <a name="a18"></a><a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>);</div><div class="line">        createGLBuffer(&amp;handles[2], hist.<a name="a19"></a><a class="code" href="classforge_1_1Histogram.htm#aa579e8fd6fabcf3b08ff2d9ae6f554c6">colors</a>(), <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>);</div><div class="line"></div><div class="line">        <span class="keywordtype">unsigned</span> frame = 0;</div><div class="line">        <span class="keywordflow">do</span> {</div><div class="line">            <span class="keywordflow">if</span> (frame%8==0) {</div><div class="line">                kernel(image, baseNoise, perlinNoise, histOut, colors, queue, device);</div><div class="line"></div><div class="line">                copyToGLBuffer(handles[0], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)image(), img.<a name="a20"></a><a class="code" href="classforge_1_1Image.htm#a8ac80e2ca9866f3184b32a1da3b647e2">size</a>());</div><div class="line">                copyToGLBuffer(handles[1], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)histOut(), hist.<a name="a21"></a><a class="code" href="classforge_1_1Histogram.htm#a0a7be986ade6c80d40292308006af406">verticesSize</a>());</div><div class="line">                copyToGLBuffer(handles[2], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)colors(), hist.<a name="a22"></a><a class="code" href="classforge_1_1Histogram.htm#a3012cc13e7ec06d223e5cf9dc21e8cd4">colorsSize</a>());</div><div class="line"></div><div class="line">                frame = 0;</div><div class="line">            }</div><div class="line"></div><div class="line">            wnd.<a name="a23"></a><a class="code" href="classforge_1_1Window.htm#a5d3ed7b3fed2fb9d0f8ce0a44b487755">draw</a>(0, 0, img,  <span class="stringliteral">&quot;Dynamic Perlin Noise&quot;</span> );</div><div class="line">            wnd.<a class="code" href="classforge_1_1Window.htm#a5d3ed7b3fed2fb9d0f8ce0a44b487755">draw</a>(0, 1, chart, <span class="stringliteral">&quot;Histogram of Noisy Image&quot;</span>);</div><div class="line"></div><div class="line">            wnd.<a name="a24"></a><a class="code" href="classforge_1_1Window.htm#ac236527803a9ed5b5a908d2014f9e1ab">swapBuffers</a>();</div><div class="line">            frame++;</div><div class="line">        } <span class="keywordflow">while</span>(!wnd.<a name="a25"></a><a class="code" href="classforge_1_1Window.htm#a800cef45e6604024ba71700cf036baae">close</a>());</div><div class="line"></div><div class="line">        releaseGLBuffer(handles[0]);</div><div class="line">        releaseGLBuffer(handles[1]);</div><div class="line">        releaseGLBuffer(handles[2]);</div><div class="line"></div><div class="line">    }<span class="keywordflow">catch</span> (<a name="_a26"></a><a class="code" href="classforge_1_1Error.htm">forge::Error</a> err) {</div><div class="line">        std::cout &lt;&lt; err.<a name="a27"></a><a class="code" href="classforge_1_1Error.htm#aff06f49065b54a8a86e02e9a2441a8ba">what</a>() &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; err.<a name="a28"></a><a class="code" href="classforge_1_1Error.htm#a2024c05f6fc6a9077fe66d857e22fcd7">err</a>() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;</div><div class="line">    } <span class="keywordflow">catch</span> (cl::Error err) {</div><div class="line">        std::cout &lt;&lt; err.what() &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; err.err() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Sat Sep 10 2016 11:16:13 for Forge by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
