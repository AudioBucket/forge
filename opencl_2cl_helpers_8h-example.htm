<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Forge: opencl/cl_helpers.h</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="forge.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Forge
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('opencl_2cl_helpers_8h-example.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">opencl/cl_helpers.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div><div class="line"><span class="comment"> * Copyright (c) 2015-2019, ArrayFire</span></div><div class="line"><span class="comment"> * All rights reserved.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div><div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div><div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div><div class="line"><span class="comment"> ********************************************************/</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="forge_8h.htm">forge.h</a>&gt;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#define CL_HPP_ENABLE_EXCEPTIONS</span></div><div class="line"><span class="preprocessor">#define CL_HPP_MINIMUM_OPENCL_VERSION 120</span></div><div class="line"><span class="preprocessor">#define CL_HPP_TARGET_OPENCL_VERSION 120</span></div><div class="line"></div><div class="line"><span class="preprocessor">#pragma GCC diagnostic push</span></div><div class="line"><span class="preprocessor">#pragma GCC diagnostic ignored &quot;-Wunused-function&quot;</span></div><div class="line"><span class="preprocessor">#include &lt;CL/cl2.hpp&gt;</span></div><div class="line"><span class="preprocessor">#pragma GCC diagnostic pop</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using namespace </span>cl;</div><div class="line"></div><div class="line"><span class="preprocessor">#if defined (OS_MAC)</span></div><div class="line"><span class="preprocessor">#include &lt;OpenGL/OpenGL.h&gt;</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> std::string CL_GL_SHARING_EXT = <span class="stringliteral">&quot;cl_APPLE_gl_sharing&quot;</span>;</div><div class="line"><span class="preprocessor">#else</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> std::string CL_GL_SHARING_EXT = <span class="stringliteral">&quot;cl_khr_gl_sharing&quot;</span>;</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line"><span class="keywordtype">bool</span> checkGLInterop(<span class="keyword">const</span> cl::Platform &amp;plat,  <span class="keyword">const</span> cl::Device &amp;pDevice, <span class="keyword">const</span> <a name="_a0"></a><a class="code" href="classforge_1_1Window.htm">forge::Window</a> &amp;wnd)</div><div class="line">{</div><div class="line">    <span class="keywordtype">bool</span> ret_val = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">// find the extension required</span></div><div class="line">    std::string exts = pDevice.getInfo&lt;CL_DEVICE_EXTENSIONS&gt;();</div><div class="line">    std::stringstream ss(exts);</div><div class="line">    std::string item;</div><div class="line"></div><div class="line">    <span class="keywordflow">while</span> (std::getline(ss,item,<span class="charliteral">&#39; &#39;</span>)) {</div><div class="line">        <span class="keywordflow">if</span> (item == CL_GL_SHARING_EXT) {</div><div class="line">            ret_val = <span class="keyword">true</span>;</div><div class="line">            <span class="keywordflow">break</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (!ret_val) <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line"><span class="preprocessor">#if !defined(OS_MAC) // Check on Linux, Windows</span></div><div class="line">    <span class="comment">// Check if current OpenCL device is belongs to the OpenGL context</span></div><div class="line"></div><div class="line"><span class="preprocessor">#if defined(OS_LNX)</span></div><div class="line">    cl_context_properties cps[] = {</div><div class="line">        CL_GL_CONTEXT_KHR, (cl_context_properties)wnd.<a name="a1"></a><a class="code" href="classforge_1_1Window.htm#a0624dfa20f28a5894c233b62a2c0fe1b">context</a>(),</div><div class="line">        CL_GLX_DISPLAY_KHR, (cl_context_properties)wnd.<a name="a2"></a><a class="code" href="classforge_1_1Window.htm#a2b8fd58d46119ebcc6486d3f4a6f5079">display</a>(),</div><div class="line">        CL_CONTEXT_PLATFORM, (cl_context_properties)plat(),</div><div class="line">        0</div><div class="line">    };</div><div class="line"><span class="preprocessor">#else </span><span class="comment">/* OS_WIN */</span><span class="preprocessor"></span></div><div class="line">    cl_context_properties cps[] = {</div><div class="line">        CL_GL_CONTEXT_KHR, (cl_context_properties)wnd.<a class="code" href="classforge_1_1Window.htm#a0624dfa20f28a5894c233b62a2c0fe1b">context</a>(),</div><div class="line">        CL_WGL_HDC_KHR, (cl_context_properties)wnd.<a class="code" href="classforge_1_1Window.htm#a2b8fd58d46119ebcc6486d3f4a6f5079">display</a>(),</div><div class="line">        CL_CONTEXT_PLATFORM, (cl_context_properties)plat(),</div><div class="line">        0</div><div class="line">    };</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line">    <span class="comment">// Load the extension</span></div><div class="line">    <span class="comment">// If cl_khr_gl_sharing is available, this function should be present</span></div><div class="line">    <span class="comment">// This has been checked earlier, it comes to this point only if it is found</span></div><div class="line">    <span class="keyword">auto</span> func = (clGetGLContextInfoKHR_fn)</div><div class="line">        clGetExtensionFunctionAddressForPlatform(plat(), <span class="stringliteral">&quot;clGetGLContextInfoKHR&quot;</span>);</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (!func) <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Get all devices associated with opengl context</span></div><div class="line">    std::vector&lt;cl_device_id&gt; devices(16);</div><div class="line">    <span class="keywordtype">size_t</span> ret = 0;</div><div class="line">    cl_int err = func(cps,</div><div class="line">                      CL_DEVICES_FOR_GL_CONTEXT_KHR,</div><div class="line">                      devices.size() * <span class="keyword">sizeof</span>(cl_device_id),</div><div class="line">                      devices.data(),</div><div class="line">                      &amp;ret);</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (err != CL_SUCCESS) <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keywordtype">int</span> num = ret / <span class="keyword">sizeof</span>(cl_device_id);</div><div class="line">    devices.resize(num);</div><div class="line"></div><div class="line">    <span class="comment">// Check if current device is present in the associated devices</span></div><div class="line">    cl_device_id current_device = pDevice();</div><div class="line">    <span class="keyword">auto</span> res = std::find(std::begin(devices), std::end(devices), current_device);</div><div class="line"></div><div class="line">    ret_val = res != std::end(devices);</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line">    <span class="keywordflow">return</span> ret_val;</div><div class="line">}</div><div class="line"></div><div class="line">cl::Context createCLGLContext(<span class="keyword">const</span> <a class="code" href="classforge_1_1Window.htm">forge::Window</a> &amp;wnd)</div><div class="line">{</div><div class="line">    std::vector&lt;cl::Platform&gt; platforms;</div><div class="line">    Platform::get(&amp;platforms);</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (<span class="keyword">auto</span> platform : platforms) {</div><div class="line">        std::vector&lt;cl::Device&gt; devices;</div><div class="line"></div><div class="line">        <span class="keywordflow">try</span> {</div><div class="line">            platform.getDevices(CL_DEVICE_TYPE_GPU, &amp;devices);</div><div class="line">        } <span class="keywordflow">catch</span>(<span class="keyword">const</span> cl::Error &amp;err) {</div><div class="line">            <span class="keywordflow">if</span> (err.err() != CL_DEVICE_NOT_FOUND) {</div><div class="line">                <span class="keywordflow">throw</span>;</div><div class="line">            } <span class="keywordflow">else</span> {</div><div class="line">                <span class="keywordflow">continue</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keywordflow">for</span> (<span class="keyword">auto</span> device : devices) {</div><div class="line">            <span class="keywordflow">if</span> (!checkGLInterop(platform, device, wnd)) <span class="keywordflow">continue</span>;</div><div class="line"><span class="preprocessor">#if defined(OS_MAC)</span></div><div class="line">            CGLContextObj cgl_current_ctx = CGLGetCurrentContext();</div><div class="line">            CGLShareGroupObj cgl_share_group = CGLGetShareGroup(cgl_current_ctx);</div><div class="line"></div><div class="line">            cl_context_properties cps[] = {</div><div class="line">                CL_CONTEXT_PROPERTY_USE_CGL_SHAREGROUP_APPLE, (cl_context_properties)cgl_share_group,</div><div class="line">                0</div><div class="line">            };</div><div class="line"><span class="preprocessor">#elif defined(OS_LNX)</span></div><div class="line">            cl_context_properties cps[] = {</div><div class="line">                CL_GL_CONTEXT_KHR, (cl_context_properties)wnd.<a class="code" href="classforge_1_1Window.htm#a0624dfa20f28a5894c233b62a2c0fe1b">context</a>(),</div><div class="line">                CL_GLX_DISPLAY_KHR, (cl_context_properties)wnd.<a class="code" href="classforge_1_1Window.htm#a2b8fd58d46119ebcc6486d3f4a6f5079">display</a>(),</div><div class="line">                CL_CONTEXT_PLATFORM, (cl_context_properties)platform(),</div><div class="line">                0</div><div class="line">            };</div><div class="line"><span class="preprocessor">#else </span><span class="comment">/* OS_WIN */</span><span class="preprocessor"></span></div><div class="line">            cl_context_properties cps[] = {</div><div class="line">                CL_GL_CONTEXT_KHR, (cl_context_properties)wnd.<a class="code" href="classforge_1_1Window.htm#a0624dfa20f28a5894c233b62a2c0fe1b">context</a>(),</div><div class="line">                CL_WGL_HDC_KHR, (cl_context_properties)wnd.<a class="code" href="classforge_1_1Window.htm#a2b8fd58d46119ebcc6486d3f4a6f5079">display</a>(),</div><div class="line">                CL_CONTEXT_PLATFORM, (cl_context_properties)platform(),</div><div class="line">                0</div><div class="line">            };</div><div class="line"><span class="preprocessor">#endif</span></div><div class="line">            std::cout &lt;&lt; <span class="stringliteral">&quot;Platform: &quot;</span> &lt;&lt; platform.getInfo&lt;CL_PLATFORM_NAME&gt;() &lt;&lt; std::endl;</div><div class="line">            std::cout &lt;&lt; <span class="stringliteral">&quot;Device: &quot;</span> &lt;&lt; device.getInfo&lt;CL_DEVICE_NAME&gt;() &lt;&lt; std::endl;</div><div class="line">            <span class="keywordflow">return</span> cl::Context(device, cps);</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;No CL-GL sharing contexts found&quot;</span>);</div><div class="line">}</div><div class="line"></div><div class="line">cl::CommandQueue queue;</div><div class="line">cl::Context context;</div><div class="line"></div><div class="line">cl_context getContext()</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> context();</div><div class="line">}</div><div class="line"></div><div class="line">cl_command_queue getCommandQueue()</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> queue();</div><div class="line">}</div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Sat Sep 10 2016 11:16:13 for Forge by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
