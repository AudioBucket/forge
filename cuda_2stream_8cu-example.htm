<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Forge: cuda/stream.cu</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="forge.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Forge
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('cuda_2stream_8cu-example.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">cuda/stream.cu</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line">/*******************************************************</div><div class="line"> * Copyright (c) 2015-2019, ArrayFire</div><div class="line"> * All rights reserved.</div><div class="line"> *</div><div class="line"> * This file is distributed under 3-clause BSD license.</div><div class="line"> * The complete license agreement can be obtained at:</div><div class="line"> * http://arrayfire.com/licenses/BSD-3-Clause</div><div class="line"> ********************************************************/</div><div class="line"></div><div class="line">#include &lt;forge.h&gt;</div><div class="line">#include &lt;cuda_runtime.h&gt;</div><div class="line">#define USE_FORGE_CUDA_COPY_HELPERS</div><div class="line">#include &lt;ComputeCopy.h&gt;</div><div class="line"></div><div class="line">const unsigned DIMX = 640;</div><div class="line">const unsigned DIMY = 480;</div><div class="line">const float MINIMUM = 1.0f;</div><div class="line">const float MAXIMUM = 20.f;</div><div class="line">const float STEP    = 2.0f;</div><div class="line">const int NELEMS    = (MAXIMUM-MINIMUM+1)/STEP;</div><div class="line"></div><div class="line">void generateColors(float* colors);</div><div class="line"></div><div class="line">void generatePoints(float* points, float* dirs);</div><div class="line"></div><div class="line">inline int divup(int a, int b)</div><div class="line">{</div><div class="line">    return (a+b-1)/b;</div><div class="line">}</div><div class="line"></div><div class="line">int main(void)</div><div class="line">{</div><div class="line">    /*</div><div class="line">     * First Forge call should be a window creation call</div><div class="line">     * so that necessary OpenGL context is created for any</div><div class="line">     * other forge::* object to be created successfully</div><div class="line">     */</div><div class="line">    forge::Window wnd(DIMX, DIMY, &quot;3D Vector Field Demo&quot;);</div><div class="line">    wnd.makeCurrent();</div><div class="line"></div><div class="line">    forge::Chart chart(FG_CHART_3D);</div><div class="line">    chart.setAxesLimits(MINIMUM-1.0f, MAXIMUM,</div><div class="line">                        MINIMUM-1.0f, MAXIMUM,</div><div class="line">                        MINIMUM-1.0f, MAXIMUM);</div><div class="line">    chart.setAxesTitles(&quot;x-axis&quot;, &quot;y-axis&quot;, &quot;z-axis&quot;);</div><div class="line"></div><div class="line">    int numElems = NELEMS*NELEMS*NELEMS;</div><div class="line">    forge::VectorField field = chart.vectorField(numElems, forge::f32);</div><div class="line">    field.setColor(0.f, 1.f, 0.f, 1.f);</div><div class="line"></div><div class="line">    float* points;</div><div class="line">    float* colors;</div><div class="line">    float* dirs;</div><div class="line"></div><div class="line">    FORGE_CUDA_CHECK(cudaMalloc((void**)&amp;points, 3*numElems*sizeof(float)));</div><div class="line">    FORGE_CUDA_CHECK(cudaMalloc((void**)&amp;colors, 3*numElems*sizeof(float)));</div><div class="line">    FORGE_CUDA_CHECK(cudaMalloc((void**)&amp;dirs, 3*numElems*sizeof(float)));</div><div class="line"></div><div class="line">    generatePoints(points, dirs);</div><div class="line">    generateColors(colors);</div><div class="line"></div><div class="line">    GfxHandle* handles[3];</div><div class="line">    createGLBuffer(&amp;handles[0], field.vertices(), FORGE_VERTEX_BUFFER);</div><div class="line">    createGLBuffer(&amp;handles[1], field.colors(), FORGE_VERTEX_BUFFER);</div><div class="line">    createGLBuffer(&amp;handles[2], field.directions(), FORGE_VERTEX_BUFFER);</div><div class="line"></div><div class="line">    copyToGLBuffer(handles[0], (ComputeResourceHandle)points, field.verticesSize());</div><div class="line">    copyToGLBuffer(handles[1], (ComputeResourceHandle)colors,   field.colorsSize());</div><div class="line">    copyToGLBuffer(handles[2], (ComputeResourceHandle)dirs, field.directionsSize());</div><div class="line"></div><div class="line">    do {</div><div class="line">        wnd.draw(chart);</div><div class="line">    } while(!wnd.close());</div><div class="line"></div><div class="line">    releaseGLBuffer(handles[0]);</div><div class="line">    releaseGLBuffer(handles[1]);</div><div class="line">    releaseGLBuffer(handles[2]);</div><div class="line"></div><div class="line">    FORGE_CUDA_CHECK(cudaFree(points));</div><div class="line">    FORGE_CUDA_CHECK(cudaFree(colors));</div><div class="line">    FORGE_CUDA_CHECK(cudaFree(dirs));</div><div class="line"></div><div class="line">    return 0;</div><div class="line">}</div><div class="line"></div><div class="line">__global__</div><div class="line">void genColorsKernel(float* colors, int nelems)</div><div class="line">{</div><div class="line">    const float AF_BLUE[4] = {0.0588f , 0.1137f , 0.2745f , 1.0f};</div><div class="line">    const float AF_ORANGE[4] = {0.8588f , 0.6137f , 0.0745f , 1.0f};</div><div class="line"></div><div class="line">    int i = blockDim.x * blockIdx.x + threadIdx.x;</div><div class="line"></div><div class="line">    if (i&lt;nelems) {</div><div class="line">        if (i%2==0) {</div><div class="line">            colors[3*i+0] = AF_ORANGE[0];</div><div class="line">            colors[3*i+1] = AF_ORANGE[1];</div><div class="line">            colors[3*i+2] = AF_ORANGE[2];</div><div class="line">        } else {</div><div class="line">            colors[3*i+0] = AF_BLUE[0];</div><div class="line">            colors[3*i+1] = AF_BLUE[1];</div><div class="line">            colors[3*i+2] = AF_BLUE[2];</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">void generateColors(float* colors)</div><div class="line">{</div><div class="line">    const int numElems = NELEMS*NELEMS*NELEMS;</div><div class="line">    static const dim3 threads(512);</div><div class="line">    dim3 blocks(divup(numElems, threads.x));</div><div class="line"></div><div class="line">    genColorsKernel&lt;&lt;&lt;blocks, threads&gt;&gt;&gt;(colors, numElems);</div><div class="line">}</div><div class="line"></div><div class="line">__global__</div><div class="line">void pointGenKernel(float* points, float* dirs, int nBBS0, int nelems, float minimum, float step)</div><div class="line">{</div><div class="line">    int k = blockIdx.x / nBBS0;</div><div class="line">    int i = blockDim.x * (blockIdx.x-k*nBBS0) + threadIdx.x;</div><div class="line">    int j = blockDim.y * blockIdx.y + threadIdx.y;</div><div class="line"></div><div class="line">    if (i&lt;nelems &amp;&amp; j&lt;nelems &amp;&amp; k&lt;nelems) {</div><div class="line">        float x = minimum + i*step;</div><div class="line">        float y = minimum + j*step;</div><div class="line">        float z = minimum + k*step;</div><div class="line"></div><div class="line">        int id = i + j * nelems + k * nelems*nelems;</div><div class="line"></div><div class="line">        points[3*id+0] = x;</div><div class="line">        points[3*id+1] = y;</div><div class="line">        points[3*id+2] = z;</div><div class="line"></div><div class="line">        dirs[3*id+0] = x-10.f;</div><div class="line">        dirs[3*id+1] = y-10.f;</div><div class="line">        dirs[3*id+2] = z-10.f;</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">void generatePoints(float* points, float* dirs)</div><div class="line">{</div><div class="line">    static dim3 threads(8, 8);</div><div class="line"></div><div class="line">    int blk_x = divup(NELEMS, threads.x);</div><div class="line">    int blk_y = divup(NELEMS, threads.y);</div><div class="line"></div><div class="line">    dim3 blocks(blk_x*NELEMS, blk_y);</div><div class="line"></div><div class="line">    pointGenKernel&lt;&lt;&lt;blocks, threads&gt;&gt;&gt;(points, dirs, blk_x, NELEMS, MINIMUM, STEP);</div><div class="line">}</div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Thu May 18 2017 10:55:58 for Forge by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
