<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Forge: cuda/plotting.cu</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="forge.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Forge
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('cuda_2plotting_8cu-example.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">cuda/plotting.cu</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line">/*******************************************************</div><div class="line"> * Copyright (c) 2015-2019, ArrayFire</div><div class="line"> * All rights reserved.</div><div class="line"> *</div><div class="line"> * This file is distributed under 3-clause BSD license.</div><div class="line"> * The complete license agreement can be obtained at:</div><div class="line"> * http://arrayfire.com/licenses/BSD-3-Clause</div><div class="line"> ********************************************************/</div><div class="line"></div><div class="line">#include &lt;forge.h&gt;</div><div class="line">#include &lt;cuda_runtime.h&gt;</div><div class="line">#include &lt;cuComplex.h&gt;</div><div class="line">#define USE_FORGE_CUDA_COPY_HELPERS</div><div class="line">#include &lt;ComputeCopy.h&gt;</div><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">const unsigned DIMX = 1000;</div><div class="line">const unsigned DIMY = 800;</div><div class="line"></div><div class="line">static const float    dx = 0.1;</div><div class="line">static const float    FRANGE_START = 0.f;</div><div class="line">static const float    FRANGE_END = 2 * 3.141592f;</div><div class="line">static const size_t   DATA_SIZE = ( FRANGE_END - FRANGE_START ) / dx;</div><div class="line"></div><div class="line">void kernel(float* dev_out, int functionCode);</div><div class="line"></div><div class="line">int main(void)</div><div class="line">{</div><div class="line">    float *sin_out;</div><div class="line">    float *cos_out;</div><div class="line">    float *tan_out;</div><div class="line">    float *log_out;</div><div class="line"></div><div class="line">    /*</div><div class="line">     * First Forge call should be a window creation call</div><div class="line">     * so that necessary OpenGL context is created for any</div><div class="line">     * other forge::* object to be created successfully</div><div class="line">     */</div><div class="line">    forge::Window wnd(DIMX, DIMY, &quot;Plotting Demo&quot;);</div><div class="line">    wnd.makeCurrent();</div><div class="line"></div><div class="line">    forge::Chart chart(FG_CHART_2D);</div><div class="line">    chart.setAxesLimits(FRANGE_START, FRANGE_END, -1.0f, 1.0f);</div><div class="line"></div><div class="line">    /* Create several plot objects which creates the necessary</div><div class="line">     * vertex buffer objects to hold the different plot types</div><div class="line">     */</div><div class="line">    forge::Plot plt0 = chart.plot( DATA_SIZE, forge::f32);                                 //create a default plot</div><div class="line">    forge::Plot plt1 = chart.plot( DATA_SIZE, forge::f32, FG_PLOT_LINE, FG_MARKER_NONE);       //or specify a specific plot type</div><div class="line">    forge::Plot plt2 = chart.plot( DATA_SIZE, forge::f32, FG_PLOT_LINE, FG_MARKER_TRIANGLE);   //last parameter specifies marker shape</div><div class="line">    forge::Plot plt3 = chart.plot( DATA_SIZE, forge::f32, FG_PLOT_SCATTER, FG_MARKER_CROSS);</div><div class="line"></div><div class="line">    /*</div><div class="line">     * Set plot colors</div><div class="line">     */</div><div class="line">    plt0.setColor(FG_RED);</div><div class="line">    plt1.setColor(FG_BLUE);</div><div class="line">    plt2.setColor(FG_YELLOW);            //use a forge predefined color</div><div class="line">    plt3.setColor((forge::Color) 0x257973FF);  //or any hex-valued color</div><div class="line">    /*</div><div class="line">     * Set plot legends</div><div class="line">     */</div><div class="line">    plt0.setLegend(&quot;Sine&quot;);</div><div class="line">    plt1.setLegend(&quot;Cosine&quot;);</div><div class="line">    plt2.setLegend(&quot;Tangent&quot;);</div><div class="line">    plt3.setLegend(&quot;Log base 10&quot;);</div><div class="line"></div><div class="line">    FORGE_CUDA_CHECK(cudaMalloc((void**)&amp;sin_out, sizeof(float) * DATA_SIZE * 2));</div><div class="line">    FORGE_CUDA_CHECK(cudaMalloc((void**)&amp;cos_out, sizeof(float) * DATA_SIZE * 2));</div><div class="line">    FORGE_CUDA_CHECK(cudaMalloc((void**)&amp;tan_out, sizeof(float) * DATA_SIZE * 2));</div><div class="line">    FORGE_CUDA_CHECK(cudaMalloc((void**)&amp;log_out, sizeof(float) * DATA_SIZE * 2));</div><div class="line"></div><div class="line">    kernel(sin_out, 0);</div><div class="line">    kernel(cos_out, 1);</div><div class="line">    kernel(tan_out, 2);</div><div class="line">    kernel(log_out, 3);</div><div class="line"></div><div class="line">    GfxHandle* handles[4];</div><div class="line">    createGLBuffer(&amp;handles[0], plt0.vertices(), FORGE_VERTEX_BUFFER);</div><div class="line">    createGLBuffer(&amp;handles[1], plt1.vertices(), FORGE_VERTEX_BUFFER);</div><div class="line">    createGLBuffer(&amp;handles[2], plt2.vertices(), FORGE_VERTEX_BUFFER);</div><div class="line">    createGLBuffer(&amp;handles[3], plt3.vertices(), FORGE_VERTEX_BUFFER);</div><div class="line"></div><div class="line">    /* copy your data into the vertex buffer object exposed by</div><div class="line">     * forge::Plot class and then proceed to rendering.</div><div class="line">     * To help the users with copying the data from compute</div><div class="line">     * memory to display memory, Forge provides copy headers</div><div class="line">     * along with the library to help with this task</div><div class="line">     */</div><div class="line">    copyToGLBuffer(handles[0], (ComputeResourceHandle)sin_out, plt0.verticesSize());</div><div class="line">    copyToGLBuffer(handles[1], (ComputeResourceHandle)cos_out, plt1.verticesSize());</div><div class="line">    copyToGLBuffer(handles[2], (ComputeResourceHandle)tan_out, plt2.verticesSize());</div><div class="line">    copyToGLBuffer(handles[3], (ComputeResourceHandle)log_out, plt3.verticesSize());</div><div class="line"></div><div class="line">    do {</div><div class="line">        wnd.draw(chart);</div><div class="line">    } while(!wnd.close());</div><div class="line"></div><div class="line">    FORGE_CUDA_CHECK(cudaFree(sin_out));</div><div class="line">    FORGE_CUDA_CHECK(cudaFree(cos_out));</div><div class="line">    FORGE_CUDA_CHECK(cudaFree(tan_out));</div><div class="line">    FORGE_CUDA_CHECK(cudaFree(log_out));</div><div class="line">    releaseGLBuffer(handles[0]);</div><div class="line">    releaseGLBuffer(handles[1]);</div><div class="line">    releaseGLBuffer(handles[2]);</div><div class="line">    releaseGLBuffer(handles[3]);</div><div class="line"></div><div class="line">    return 0;</div><div class="line">}</div><div class="line"></div><div class="line">__global__</div><div class="line">void simple_sinf(float* out, const size_t _data_size, int fnCode, const float _dx, const float _frange_start)</div><div class="line">{</div><div class="line">    int i = blockIdx.x * blockDim.x  + threadIdx.x;</div><div class="line"></div><div class="line">    if (i &lt; _data_size) {</div><div class="line">        float x  = _frange_start + i * _dx;</div><div class="line">        int idx  = 2 * i;</div><div class="line">        out[idx] = x;</div><div class="line"></div><div class="line">        switch(fnCode) {</div><div class="line">            case 0:</div><div class="line">                out[ idx + 1 ] = sinf(x);</div><div class="line">                break;</div><div class="line">            case 1:</div><div class="line">                out[ idx + 1 ] = cosf(x);</div><div class="line">                break;</div><div class="line">            case 2:</div><div class="line">                out[ idx + 1 ] = tanf(x);</div><div class="line">                break;</div><div class="line">            case 3:</div><div class="line">                out[ idx + 1 ] = log10f(x);</div><div class="line">                break;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">inline int divup(int a, int b)</div><div class="line">{</div><div class="line">    return (a+b-1)/b;</div><div class="line">}</div><div class="line"></div><div class="line">void kernel(float* dev_out, int functionCode)</div><div class="line">{</div><div class="line">    static const dim3 threads(1024);</div><div class="line">    dim3 blocks(divup(DATA_SIZE, 1024));</div><div class="line"></div><div class="line">    simple_sinf &lt;&lt; &lt; blocks, threads &gt;&gt; &gt;(dev_out, DATA_SIZE, functionCode, dx, FRANGE_START);</div><div class="line">}</div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Thu May 18 2017 10:55:58 for Forge by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
