<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Forge: opencl/fractal.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="forge.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Forge
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('opencl_2fractal_8cpp-example.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">opencl/fractal.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div><div class="line"><span class="comment"> * Copyright (c) 2015-2019, ArrayFire</span></div><div class="line"><span class="comment"> * All rights reserved.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div><div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div><div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div><div class="line"><span class="comment"> ********************************************************/</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="forge_8h.htm">forge.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &quot;cl_helpers.h&quot;</span></div><div class="line"><span class="preprocessor">#include &lt;mutex&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;iterator&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using namespace </span>cl;</div><div class="line"><span class="keyword">using namespace </span>std;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> DIMX = 512;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> DIMY = 512;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> IMG_SIZE = DIMX * DIMY * 4;</div><div class="line"></div><div class="line"><span class="preprocessor">#define USE_FORGE_OPENCL_COPY_HELPERS</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="ComputeCopy_8h.htm">ComputeCopy.h</a>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> std::string fractal_ocl_kernel =</div><div class="line"><span class="stringliteral">&quot;float magnitude(float2 a)\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;    return sqrt(a.s0*a.s0+a.s1*a.s1);\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;float2 mul(float2 a, float2 b)\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;    return (float2)(a.s0*b.s0-a.s1*b.s1, a.s1*b.s0+a.s0*b.s1);\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;float2 add(float2 a, float2 b)\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;    return (float2)(a.s0+b.s0, a.s1+b.s1);\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;int pixel(int x, int y, int width, int height)\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;    const float scale = 1.5;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;    float jx = scale * (float)(width/2.0f - x)/(width/2.0f);\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;    float jy = scale * (float)(height/2.0f - y)/(height/2.0f);\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;    float2 c = (float2)(-0.8f, 0.156f);\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;    float2 a = (float2)(jx, jy);\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;    for (int i=0; i&lt;200; i++) {\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;        a = add(mul(a, a), c);\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;        if (magnitude(a) &gt; 1000.0f)\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;            return 0;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;    }\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;    return 1;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;}\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;kernel\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;void julia(global unsigned char* out, const unsigned w, const unsigned h)\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;{\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;    int x = get_group_id(0) * get_local_size(0) + get_local_id(0);\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;    int y = get_group_id(1) * get_local_size(1) + get_local_id(1);\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;    if (x&lt;w &amp;&amp; y&lt;h) {\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;        int offset        = x + y * w;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;        int juliaValue    = pixel(x, y, w, h);\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;        out[offset*4 + 1] = 255 * juliaValue;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;        out[offset*4 + 0] = 0;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;        out[offset*4 + 2] = 0;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;        out[offset*4 + 3] = 255;\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;    }\n&quot;</span></div><div class="line"><span class="stringliteral">&quot;}\n&quot;</span>;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="keywordtype">int</span> divup(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b)</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> (a+b-1)/b;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">void</span> kernel(cl::Buffer&amp; devOut, cl::CommandQueue&amp; queue)</div><div class="line">{</div><div class="line">    <span class="keyword">static</span> std::once_flag   compileFlag;</div><div class="line">    <span class="keyword">static</span> cl::Program      prog;</div><div class="line">    <span class="keyword">static</span> cl::Kernel       kern;</div><div class="line"></div><div class="line">    std::call_once(compileFlag,</div><div class="line">        [queue]() {</div><div class="line">        prog = cl::Program(queue.getInfo&lt;CL_QUEUE_CONTEXT&gt;(), fractal_ocl_kernel, <span class="keyword">true</span>);</div><div class="line">            kern = cl::Kernel(prog, <span class="stringliteral">&quot;julia&quot;</span>);</div><div class="line">        });</div><div class="line"></div><div class="line">    <span class="keyword">auto</span> juliaOp = cl::KernelFunctor&lt;Buffer, unsigned, unsigned&gt;(kern);</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> NDRange local(8, 8);</div><div class="line">    NDRange global(local[0] * divup(DIMX, local[0]),</div><div class="line">                   local[1] * divup(DIMY, local[1]));</div><div class="line"></div><div class="line">    juliaOp(EnqueueArgs(queue, global, local), devOut, DIMX, DIMY);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <span class="keywordflow">try</span> {</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">        * First Forge call should be a window creation call</span></div><div class="line"><span class="comment">        * so that necessary OpenGL context is created for any</span></div><div class="line"><span class="comment">        * other forge::* object to be created successfully</span></div><div class="line"><span class="comment">        */</span></div><div class="line">        <a name="_a0"></a><a class="code" href="classforge_1_1Window.htm">forge::Window</a> wnd(DIMX, DIMY, <span class="stringliteral">&quot;Fractal Demo&quot;</span>);</div><div class="line">        wnd.<a name="a1"></a><a class="code" href="classforge_1_1Window.htm#afdc06d5b1652d4ae491be94d3edc5a6f">makeCurrent</a>();</div><div class="line"></div><div class="line">        <span class="comment">/* Create an image object which creates the necessary</span></div><div class="line"><span class="comment">        * textures and pixel buffer objects to hold the image</span></div><div class="line"><span class="comment">        * */</span></div><div class="line">        <a name="_a2"></a><a class="code" href="classforge_1_1Image.htm">forge::Image</a> img(DIMX, DIMY, <a name="a3"></a><a class="code" href="defines_8h.htm#a162f1d98558c931a93638df47cb412dba550d4ebc7407669a35a87057ac44c5e4">FG_RGBA</a>, <a name="a4"></a><a class="code" href="namespaceforge.htm#acfe99d230e216901bd782cc580e4e815afa33d5748ff04bcd920280e5a3b790c0">forge::u8</a>);</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Helper function to create a CLGL interop context.</span></div><div class="line"><span class="comment">         * This function checks for if the extension is available</span></div><div class="line"><span class="comment">         * and creates the context on the appropriate device.</span></div><div class="line"><span class="comment">         * Note: context and queue are defined in cl_helpers.h</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        context = createCLGLContext(wnd);</div><div class="line">        Device device = context.getInfo&lt;CL_CONTEXT_DEVICES&gt;()[0];</div><div class="line">        queue = CommandQueue(context, device);</div><div class="line"></div><div class="line">        <span class="comment">/* copy your data into the pixel buffer object exposed by</span></div><div class="line"><span class="comment">         * forge::Image class and then proceed to rendering.</span></div><div class="line"><span class="comment">         * To help the users with copying the data from compute</span></div><div class="line"><span class="comment">         * memory to display memory, Forge provides copy headers</span></div><div class="line"><span class="comment">         * along with the library to help with this task</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        cl::Buffer devOut(context, CL_MEM_READ_WRITE, IMG_SIZE);</div><div class="line"></div><div class="line">        kernel(devOut, queue);</div><div class="line"></div><div class="line">        <a name="_a5"></a><a class="code" href="structGfxHandle.htm">GfxHandle</a>* handle = 0;</div><div class="line"></div><div class="line">        <span class="comment">// create GL-CPU interop buffer</span></div><div class="line">        createGLBuffer(&amp;handle, img.<a name="a6"></a><a class="code" href="classforge_1_1Image.htm#a5d27b0c5609cba2ecf65730d802c8668">pixels</a>(), <a name="a7"></a><a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa11ea1ee65fc38c2123afa0a33c6ef04a">FORGE_IMAGE_BUFFER</a>);</div><div class="line"></div><div class="line">        <span class="comment">// copy the data from compute buffer to graphics buffer</span></div><div class="line">        copyToGLBuffer(handle, (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)devOut(), img.<a name="a8"></a><a class="code" href="classforge_1_1Image.htm#a8ac80e2ca9866f3184b32a1da3b647e2">size</a>());</div><div class="line"></div><div class="line">        <span class="keywordflow">do</span> {</div><div class="line">            wnd.<a name="a9"></a><a class="code" href="classforge_1_1Window.htm#a5d3ed7b3fed2fb9d0f8ce0a44b487755">draw</a>(img);</div><div class="line">        } <span class="keywordflow">while</span>(!wnd.<a name="a10"></a><a class="code" href="classforge_1_1Window.htm#a800cef45e6604024ba71700cf036baae">close</a>());</div><div class="line"></div><div class="line">        <span class="comment">// destroy GL-CPU Interop buffer</span></div><div class="line">        releaseGLBuffer(handle);</div><div class="line"></div><div class="line">    }<span class="keywordflow">catch</span> (<a name="_a11"></a><a class="code" href="classforge_1_1Error.htm">forge::Error</a> err) {</div><div class="line">        std::cout &lt;&lt; err.<a name="a12"></a><a class="code" href="classforge_1_1Error.htm#aff06f49065b54a8a86e02e9a2441a8ba">what</a>() &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; err.<a name="a13"></a><a class="code" href="classforge_1_1Error.htm#a2024c05f6fc6a9077fe66d857e22fcd7">err</a>() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;</div><div class="line">    } <span class="keywordflow">catch</span> (cl::Error err) {</div><div class="line">        std::cout &lt;&lt; err.what() &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; err.err() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Thu May 18 2017 10:55:58 for Forge by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
