<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Forge: ComputeCopy.h (2016-09-09 23:31:15 +0530, (build 25baa5d)) Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="forge.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Forge
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('ComputeCopy_8h_source.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ComputeCopy.h (2016-09-09 23:31:15 +0530, (build 25baa5d))</div>  </div>
</div><!--header-->
<div class="contents">
<a href="ComputeCopy_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*******************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2015-2019, ArrayFire</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * All rights reserved.</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * This file is distributed under 3-clause BSD license.</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * The complete license agreement can be obtained at:</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> ********************************************************/</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#ifndef __COMPUTE_DATA_COPY_H__</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#define __COMPUTE_DATA_COPY_H__</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#if defined(USE_FORGE_CPU_COPY_HELPERS)</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">// No special headers for cpu backend</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#elif defined(USE_FORGE_CUDA_COPY_HELPERS)</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#ifndef GL_VERSION</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">// gl.h is required by cuda_gl_interop to be included before it</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">// And gl.h requires windows.h to be included before it</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#if defined(OS_WIN)</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;windows.h&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#endif // OS_WIN</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;GL/gl.h&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#endif // GL_VERSION</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;cuda.h&gt;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;cuda_runtime.h&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;cuda_gl_interop.h&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#elif defined(USE_FORGE_OPENCL_COPY_HELPERS)</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">// No special headers for opencl backend</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">    #error &quot;Invalid Compute model, exiting.&quot;</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">#if defined(USE_FORGE_CPU_COPY_HELPERS)</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> GfxResourceHandle;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor">#elif defined(USE_FORGE_CUDA_COPY_HELPERS)</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">typedef</span> cudaGraphicsResource* GfxResourceHandle;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">#elif defined(USE_FORGE_OPENCL_COPY_HELPERS)</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword">typedef</span> cl_mem GfxResourceHandle;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">   73</a></span>&#160;<span class="keyword">typedef</span> <span class="keywordtype">void</span>* <a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cf">   75</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">enum</span> {</div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa11ea1ee65fc38c2123afa0a33c6ef04a">   76</a></span>&#160;    <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa11ea1ee65fc38c2123afa0a33c6ef04a">FORGE_IMAGE_BUFFER</a>  = 0,     </div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">   77</a></span>&#160;    <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a> = 1      </div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;} <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cf">BufferType</a>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="structGfxHandle.htm">   80</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span>{</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="structGfxHandle.htm#aa4310d1bc8e844fdf803c8e731f00d0e">   81</a></span>&#160;    GfxResourceHandle <a class="code" href="structGfxHandle.htm#aa4310d1bc8e844fdf803c8e731f00d0e">mId</a>;</div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="structGfxHandle.htm#a1105cfec301b76086cfffc5fec9b6ee9">   82</a></span>&#160;    <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cf">BufferType</a> <a class="code" href="structGfxHandle.htm#a1105cfec301b76086cfffc5fec9b6ee9">mTarget</a>;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;} <a class="code" href="structGfxHandle.htm">GfxHandle</a>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">#if defined(USE_FORGE_CPU_COPY_HELPERS)</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keyword">static</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keywordtype">void</span> createGLBuffer(<a class="code" href="structGfxHandle.htm">GfxHandle</a>** pOut, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> pResourceId, <span class="keyword">const</span> <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cf">BufferType</a> pTarget)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="structGfxHandle.htm">GfxHandle</a>* temp = (<a class="code" href="structGfxHandle.htm">GfxHandle</a>*)malloc(<span class="keyword">sizeof</span>(<a class="code" href="structGfxHandle.htm">GfxHandle</a>));</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    temp-&gt;<a class="code" href="structGfxHandle.htm#aa4310d1bc8e844fdf803c8e731f00d0e">mId</a> = pResourceId;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    temp-&gt;<a class="code" href="structGfxHandle.htm#a1105cfec301b76086cfffc5fec9b6ee9">mTarget</a> = pTarget;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    *pOut = temp;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;}</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keyword">static</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keywordtype">void</span> releaseGLBuffer(<a class="code" href="structGfxHandle.htm">GfxHandle</a>* pHandle)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    free(pHandle);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="keyword">static</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keywordtype">void</span> copyToGLBuffer(<a class="code" href="structGfxHandle.htm">GfxHandle</a>* pGLDestination, ComputeResourceHandle  pSource, <span class="keyword">const</span> <span class="keywordtype">size_t</span> pSize)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="structGfxHandle.htm">GfxHandle</a>* temp = pGLDestination;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span> (temp-&gt;<a class="code" href="structGfxHandle.htm#a1105cfec301b76086cfffc5fec9b6ee9">mTarget</a>==<a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa11ea1ee65fc38c2123afa0a33c6ef04a">FORGE_IMAGE_BUFFER</a>) {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <a class="code" href="group__util__functions.htm#gabdbef8d2b1d49718baafd6ef374007e9">fg_update_pixel_buffer</a>(temp-&gt;<a class="code" href="structGfxHandle.htm#aa4310d1bc8e844fdf803c8e731f00d0e">mId</a>, pSize, pSource);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (temp-&gt;<a class="code" href="structGfxHandle.htm#a1105cfec301b76086cfffc5fec9b6ee9">mTarget</a>==<a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>) {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <a class="code" href="group__util__functions.htm#ga94e9af1762f3102ba4c2f3cea2540aea">fg_update_vertex_buffer</a>(temp-&gt;<a class="code" href="structGfxHandle.htm#aa4310d1bc8e844fdf803c8e731f00d0e">mId</a>, pSize, pSource);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">#if defined(USE_FORGE_CUDA_COPY_HELPERS)</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> handleCUDAError(cudaError_t err, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">if</span> (err != cudaSuccess) {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        printf( <span class="stringliteral">&quot;%s in %s at line %d\n&quot;</span>, cudaGetErrorString(err), file, line);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        exit(EXIT_FAILURE);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor">#define FORGE_CUDA_CHECK(err) (handleCUDAError(err, __FILE__, __LINE__ ))</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keyword">static</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keywordtype">void</span> createGLBuffer(<a class="code" href="structGfxHandle.htm">GfxHandle</a>** pOut, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> pResourceId, <span class="keyword">const</span> <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cf">BufferType</a> pTarget)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;{</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="structGfxHandle.htm">GfxHandle</a>* temp = (<a class="code" href="structGfxHandle.htm">GfxHandle</a>*)malloc(<span class="keyword">sizeof</span>(<a class="code" href="structGfxHandle.htm">GfxHandle</a>));</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    temp-&gt;<a class="code" href="structGfxHandle.htm#a1105cfec301b76086cfffc5fec9b6ee9">mTarget</a> = pTarget;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    cudaGraphicsResource *cudaImageResource;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    FORGE_CUDA_CHECK(cudaGraphicsGLRegisterBuffer(&amp;cudaImageResource,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                                  pResourceId,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                                  cudaGraphicsMapFlagsWriteDiscard));</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    temp-&gt;<a class="code" href="structGfxHandle.htm#aa4310d1bc8e844fdf803c8e731f00d0e">mId</a> = cudaImageResource;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    *pOut = temp;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="keyword">static</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keywordtype">void</span> releaseGLBuffer(<a class="code" href="structGfxHandle.htm">GfxHandle</a>* pHandle)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    FORGE_CUDA_CHECK(cudaGraphicsUnregisterResource(pHandle-&gt;<a class="code" href="structGfxHandle.htm#aa4310d1bc8e844fdf803c8e731f00d0e">mId</a>));</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    free(pHandle);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword">static</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="keywordtype">void</span> copyToGLBuffer(<a class="code" href="structGfxHandle.htm">GfxHandle</a>* pGLDestination, ComputeResourceHandle  pSource, <span class="keyword">const</span> <span class="keywordtype">size_t</span> pSize)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordtype">size_t</span> numBytes;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordtype">void</span>* pointer = NULL;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    cudaGraphicsResource *cudaResource = pGLDestination-&gt;<a class="code" href="structGfxHandle.htm#aa4310d1bc8e844fdf803c8e731f00d0e">mId</a>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    FORGE_CUDA_CHECK(cudaGraphicsMapResources(1, &amp;cudaResource, 0));</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    FORGE_CUDA_CHECK(cudaGraphicsResourceGetMappedPointer(&amp;pointer, &amp;numBytes, cudaResource));</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    FORGE_CUDA_CHECK(cudaMemcpy(pointer, pSource, numBytes, cudaMemcpyDeviceToDevice));</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    FORGE_CUDA_CHECK(cudaGraphicsUnmapResources(1, &amp;cudaResource, 0));</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="preprocessor">#if defined(USE_FORGE_OPENCL_COPY_HELPERS)</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="preprocessor">#pragma GCC diagnostic push</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="preprocessor">#pragma GCC diagnostic ignored &quot;-Wunused-but-set-variable&quot;</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor">#define FORGE_OCL_CHECK(cl_status, message) \</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor">    if(cl_status != CL_SUCCESS) \</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">    { \</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor">        printf(&quot;Error: %s \nError Code: %d\n&quot;, message, cl_status);\</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="preprocessor">        printf(&quot;Location: %s:%i\n&quot;, __FILE__, __LINE__);\</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="preprocessor">        exit(EXIT_FAILURE);                             \</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="preprocessor">    }</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keyword">static</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="keywordtype">void</span> createGLBuffer(<a class="code" href="structGfxHandle.htm">GfxHandle</a>** pOut, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> pResourceId, <span class="keyword">const</span> <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cf">BufferType</a> pTarget)</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <a class="code" href="structGfxHandle.htm">GfxHandle</a>* temp = (<a class="code" href="structGfxHandle.htm">GfxHandle</a>*)malloc(<span class="keyword">sizeof</span>(<a class="code" href="structGfxHandle.htm">GfxHandle</a>));</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    temp-&gt;<a class="code" href="structGfxHandle.htm#a1105cfec301b76086cfffc5fec9b6ee9">mTarget</a> = pTarget;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    cl_int returnCode = CL_SUCCESS;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    temp-&gt;<a class="code" href="structGfxHandle.htm#aa4310d1bc8e844fdf803c8e731f00d0e">mId</a> = clCreateFromGLBuffer(getContext(), CL_MEM_WRITE_ONLY, pResourceId, &amp;returnCode);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    FORGE_OCL_CHECK(returnCode, <span class="stringliteral">&quot;Failed in clCreateFromGLBuffer&quot;</span>);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    *pOut = temp;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;}</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="keyword">static</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keywordtype">void</span> releaseGLBuffer(<a class="code" href="structGfxHandle.htm">GfxHandle</a>* pHandle)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;{</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    FORGE_OCL_CHECK(clReleaseMemObject(pHandle-&gt;<a class="code" href="structGfxHandle.htm#aa4310d1bc8e844fdf803c8e731f00d0e">mId</a>), <span class="stringliteral">&quot;Failed in clReleaseMemObject&quot;</span>);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    free(pHandle);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;}</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="keyword">static</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="keywordtype">void</span> copyToGLBuffer(<a class="code" href="structGfxHandle.htm">GfxHandle</a>* pGLDestination, ComputeResourceHandle  pSource, <span class="keyword">const</span> <span class="keywordtype">size_t</span> pSize)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;{</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="comment">// The user is expected to implement a function</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="comment">// `cl_command_queue getCommandQueue()`</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    cl_command_queue queue = getCommandQueue();</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    cl_event waitEvent;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    cl_mem src = (cl_mem)pSource;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    cl_mem dst = pGLDestination-&gt;<a class="code" href="structGfxHandle.htm#aa4310d1bc8e844fdf803c8e731f00d0e">mId</a>;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="group__util__functions.htm#gae06c0e84df206dcbb06916b004fca3b9">fg_finish</a>();</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    FORGE_OCL_CHECK(clEnqueueAcquireGLObjects(queue, 1, &amp;dst, 0, NULL, &amp;waitEvent),</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                    <span class="stringliteral">&quot;Failed in clEnqueueAcquireGLObjects&quot;</span>);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    FORGE_OCL_CHECK(clWaitForEvents(1, &amp;waitEvent),</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    <span class="stringliteral">&quot;Failed in clWaitForEvents after clEnqueueAcquireGLObjects&quot;</span>);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    FORGE_OCL_CHECK(clEnqueueCopyBuffer(queue, src, dst, 0, 0, pSize, 0, NULL, &amp;waitEvent),</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    <span class="stringliteral">&quot;Failed in clEnqueueCopyBuffer&quot;</span>);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    FORGE_OCL_CHECK(clEnqueueReleaseGLObjects(queue, 1, &amp;dst, 0, NULL, &amp;waitEvent),</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                    <span class="stringliteral">&quot;Failed in clEnqueueReleaseGLObjects&quot;</span>);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    FORGE_OCL_CHECK(clWaitForEvents(1, &amp;waitEvent),</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    <span class="stringliteral">&quot;Failed in clWaitForEvents after clEnqueueReleaseGLObjects&quot;</span>);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;}</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="preprocessor">#pragma GCC diagnostic pop</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;}</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="ComputeCopy_8h_htm_adf8e136713c0691010d2bec6ba63e9cfa11ea1ee65fc38c2123afa0a33c6ef04a"><div class="ttname"><a href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa11ea1ee65fc38c2123afa0a33c6ef04a">FORGE_IMAGE_BUFFER</a></div><div class="ttdoc">OpenGL Pixel Buffer Object. </div><div class="ttdef"><b>Definition:</b> ComputeCopy.h:76</div></div>
<div class="ttc" id="ComputeCopy_8h_htm_adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c"><div class="ttname"><a href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a></div><div class="ttdoc">OpenGL Vertex Buffer Object. </div><div class="ttdef"><b>Definition:</b> ComputeCopy.h:77</div></div>
<div class="ttc" id="structGfxHandle_htm_aa4310d1bc8e844fdf803c8e731f00d0e"><div class="ttname"><a href="structGfxHandle.htm#aa4310d1bc8e844fdf803c8e731f00d0e">GfxHandle::mId</a></div><div class="ttdeci">GfxResourceHandle mId</div><div class="ttdef"><b>Definition:</b> ComputeCopy.h:81</div></div>
<div class="ttc" id="ComputeCopy_8h_htm_a160b6c9800d06caf50586d67439790c3"><div class="ttname"><a href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a></div><div class="ttdeci">void * ComputeResourceHandle</div><div class="ttdoc">A backend-agnostic handle to a compute memory resource originating from an OpenGL resource...</div><div class="ttdef"><b>Definition:</b> ComputeCopy.h:73</div></div>
<div class="ttc" id="group__util__functions_htm_gabdbef8d2b1d49718baafd6ef374007e9"><div class="ttname"><a href="group__util__functions.htm#gabdbef8d2b1d49718baafd6ef374007e9">fg_update_pixel_buffer</a></div><div class="ttdeci">FGAPI fg_err fg_update_pixel_buffer(const unsigned pBufferId, const size_t pBufferSize, const void *pBufferData)</div><div class="ttdoc">Update backend specific pixel buffer from given host side memory. </div></div>
<div class="ttc" id="structGfxHandle_htm"><div class="ttname"><a href="structGfxHandle.htm">GfxHandle</a></div><div class="ttdef"><b>Definition:</b> ComputeCopy.h:80</div></div>
<div class="ttc" id="group__util__functions_htm_ga94e9af1762f3102ba4c2f3cea2540aea"><div class="ttname"><a href="group__util__functions.htm#ga94e9af1762f3102ba4c2f3cea2540aea">fg_update_vertex_buffer</a></div><div class="ttdeci">FGAPI fg_err fg_update_vertex_buffer(const unsigned pBufferId, const size_t pBufferSize, const void *pBufferData)</div><div class="ttdoc">Update backend specific vertex buffer from given host side memory. </div></div>
<div class="ttc" id="structGfxHandle_htm_a1105cfec301b76086cfffc5fec9b6ee9"><div class="ttname"><a href="structGfxHandle.htm#a1105cfec301b76086cfffc5fec9b6ee9">GfxHandle::mTarget</a></div><div class="ttdeci">BufferType mTarget</div><div class="ttdef"><b>Definition:</b> ComputeCopy.h:82</div></div>
<div class="ttc" id="ComputeCopy_8h_htm_adf8e136713c0691010d2bec6ba63e9cf"><div class="ttname"><a href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cf">BufferType</a></div><div class="ttdeci">BufferType</div><div class="ttdef"><b>Definition:</b> ComputeCopy.h:75</div></div>
<div class="ttc" id="group__util__functions_htm_gae06c0e84df206dcbb06916b004fca3b9"><div class="ttname"><a href="group__util__functions.htm#gae06c0e84df206dcbb06916b004fca3b9">fg_finish</a></div><div class="ttdeci">FGAPI fg_err fg_finish()</div><div class="ttdoc">Sync all rendering operations till this point. </div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="ComputeCopy_8h.htm">ComputeCopy.h</a></li>
    <li class="footer">Generated on Sat Sep 10 2016 11:16:13 for Forge by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
