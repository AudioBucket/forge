<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Forge: cpu/histogram.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="forge.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Forge
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('cpu_2histogram_8cpp-example.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">cpu/histogram.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div><div class="line"><span class="comment"> * Copyright (c) 2015-2019, ArrayFire</span></div><div class="line"><span class="comment"> * All rights reserved.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div><div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div><div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div><div class="line"><span class="comment"> ********************************************************/</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="forge_8h.htm">forge.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#define USE_FORGE_CPU_COPY_HELPERS</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="ComputeCopy_8h.htm">ComputeCopy.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;complex&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;ctime&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> IMGW      = 256;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> IMGH      = 256;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> DIMX      = 1000;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> DIMY      = 800;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> NBINS     = 256;</div><div class="line"></div><div class="line"><span class="keyword">using namespace </span>std;</div><div class="line"></div><div class="line"><span class="keyword">struct </span>Bitmap {</div><div class="line">    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *ptr;</div><div class="line">    <span class="keywordtype">unsigned</span> width;</div><div class="line">    <span class="keywordtype">unsigned</span> height;</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">class </span>PerlinNoise</div><div class="line">{</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="keywordtype">float</span> base[IMGW][IMGH];</div><div class="line">        <span class="keywordtype">float</span> perlin[IMGW][IMGH];</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        PerlinNoise();</div><div class="line">        <span class="keywordtype">float</span> noise(<span class="keywordtype">float</span> u, <span class="keywordtype">float</span> v);</div><div class="line">};</div><div class="line"></div><div class="line">Bitmap createBitmap(<span class="keywordtype">unsigned</span> w, <span class="keywordtype">unsigned</span> h);</div><div class="line"></div><div class="line"><span class="keywordtype">void</span> destroyBitmap(Bitmap&amp; bmp);</div><div class="line"></div><div class="line"><span class="keywordtype">void</span> kernel(Bitmap&amp; bmp);</div><div class="line"></div><div class="line"><span class="keywordtype">void</span> populateBins(Bitmap&amp; bmp, <span class="keywordtype">int</span> *hist_array, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> nbins, <span class="keywordtype">float</span> *hist_cols);</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    Bitmap bmp = createBitmap(IMGW, IMGH);</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * First Forge call should be a window creation call</span></div><div class="line"><span class="comment">     * so that necessary OpenGL context is created for any</span></div><div class="line"><span class="comment">     * other forge::* object to be created successfully</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <a name="_a0"></a><a class="code" href="classforge_1_1Window.htm">forge::Window</a> wnd(DIMX, DIMY, <span class="stringliteral">&quot;Histogram Demo&quot;</span>);</div><div class="line">    wnd.<a name="a1"></a><a class="code" href="classforge_1_1Window.htm#afdc06d5b1652d4ae491be94d3edc5a6f">makeCurrent</a>();</div><div class="line"></div><div class="line">    <a name="_a2"></a><a class="code" href="classforge_1_1Image.htm">forge::Image</a> img(IMGW, IMGH, <a name="a3"></a><a class="code" href="defines_8h.htm#a162f1d98558c931a93638df47cb412dba550d4ebc7407669a35a87057ac44c5e4">FG_RGBA</a>, <a name="a4"></a><a class="code" href="namespaceforge.htm#acfe99d230e216901bd782cc580e4e815afa33d5748ff04bcd920280e5a3b790c0">forge::u8</a>);</div><div class="line"></div><div class="line">    <a name="_a5"></a><a class="code" href="classforge_1_1Chart.htm">forge::Chart</a> chart(<a name="a6"></a><a class="code" href="defines_8h.htm#af4e160ad397b0c0d8271fab83e2441dbab26b9da5cbdafc88a47bbe067b74924c">FG_CHART_2D</a>);</div><div class="line"></div><div class="line">    <span class="comment">/* set x axis limits to maximum and minimum values of data</span></div><div class="line"><span class="comment">     * and y axis limits to range [0, number of pixels ideally]</span></div><div class="line"><span class="comment">     * but practically total number of pixels as y range will skew</span></div><div class="line"><span class="comment">     * the histogram graph vertically. Therefore setting it to</span></div><div class="line"><span class="comment">     * 25% of total number of pixels */</span></div><div class="line">    chart.<a name="a7"></a><a class="code" href="classforge_1_1Chart.htm#a88e6960288c03aecbc6d47ef92cbec02">setAxesLimits</a>(0, 1, 0, IMGW*IMGH/(<span class="keywordtype">float</span>)(NBINS/4.0));</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * Create histogram object specifying number of bins</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <a name="_a8"></a><a class="code" href="classforge_1_1Histogram.htm">forge::Histogram</a> hist = chart.<a name="a9"></a><a class="code" href="classforge_1_1Chart.htm#ad020b4df2f68ddfb4057ab1cc9dc41bc">histogram</a>(NBINS, <a name="a10"></a><a class="code" href="namespaceforge.htm#acfe99d230e216901bd782cc580e4e815a1bd64190677c261a61c640017dbaddf1">forge::s32</a>);</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * Set histogram colors</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    hist.<a name="a11"></a><a class="code" href="classforge_1_1Histogram.htm#a4223cf126e117578e63c8fd29059c78d">setColor</a>(<a name="a12"></a><a class="code" href="defines_8h.htm#aa65cea65b505b5bb5946acdcb3e6bc38adb4ad5c8d9213ad8901d48c166d780bd">FG_YELLOW</a>);</div><div class="line"></div><div class="line">    <a name="_a13"></a><a class="code" href="structGfxHandle.htm">GfxHandle</a>* handles[3];</div><div class="line"></div><div class="line">    createGLBuffer(&amp;handles[0], img.<a name="a14"></a><a class="code" href="classforge_1_1Image.htm#a5d27b0c5609cba2ecf65730d802c8668">pixels</a>(), <a name="a15"></a><a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa11ea1ee65fc38c2123afa0a33c6ef04a">FORGE_IMAGE_BUFFER</a>);</div><div class="line">    createGLBuffer(&amp;handles[1], hist.<a name="a16"></a><a class="code" href="classforge_1_1Histogram.htm#aaa2e743d9764f9443bf4b8ea62805de8">vertices</a>(), <a name="a17"></a><a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>);</div><div class="line">    createGLBuffer(&amp;handles[2], hist.<a name="a18"></a><a class="code" href="classforge_1_1Histogram.htm#aa579e8fd6fabcf3b08ff2d9ae6f554c6">colors</a>(), <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>);</div><div class="line"></div><div class="line">    <span class="keywordflow">do</span> {</div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * generate image, and prepare data to pass into</span></div><div class="line"><span class="comment">         * Histogram&#39;s underlying vertex buffer object</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        kernel(bmp);</div><div class="line"></div><div class="line">        copyToGLBuffer(handles[0], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)bmp.ptr, img.<a name="a19"></a><a class="code" href="classforge_1_1Image.htm#a8ac80e2ca9866f3184b32a1da3b647e2">size</a>());</div><div class="line"></div><div class="line">        <span class="comment">//forge::copy(img, (const void*)bmp.ptr);</span></div><div class="line"></div><div class="line">        <span class="comment">/* copy your data into the vertex buffer object exposed by</span></div><div class="line"><span class="comment">         * forge::Histogram class and then proceed to rendering.</span></div><div class="line"><span class="comment">         * To help the users with copying the data from compute</span></div><div class="line"><span class="comment">         * memory to display memory, Forge provides copy headers</span></div><div class="line"><span class="comment">         * along with the library to help with this task</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        std::vector&lt;int&gt; histArray(NBINS, 0);</div><div class="line">        std::vector&lt;float&gt; colArray(3*NBINS, 0.0f);</div><div class="line">        populateBins(bmp, histArray.data(), NBINS, colArray.data());</div><div class="line"></div><div class="line">        copyToGLBuffer(handles[1], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)histArray.data(), hist.<a name="a20"></a><a class="code" href="classforge_1_1Histogram.htm#a0a7be986ade6c80d40292308006af406">verticesSize</a>());</div><div class="line">        copyToGLBuffer(handles[2], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)colArray.data(), hist.<a name="a21"></a><a class="code" href="classforge_1_1Histogram.htm#a3012cc13e7ec06d223e5cf9dc21e8cd4">colorsSize</a>());</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Split the window into grid regions</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="comment">//wnd.draw(2, 2, 0, img,  &quot;Dynamic Perlin Noise&quot; );</span></div><div class="line">        <span class="comment">//wnd.draw(2, 2, 1, img,  &quot;Dynamic Perlin Noise&quot; );</span></div><div class="line">        <span class="comment">//wnd.draw(2, 1, 1, chart, &quot;Histogram of Noisy Image&quot;);</span></div><div class="line">        wnd.<a name="a22"></a><a class="code" href="classforge_1_1Window.htm#a5d3ed7b3fed2fb9d0f8ce0a44b487755">draw</a>(2, 3, 0, img,  <span class="stringliteral">&quot;Dynamic Perlin Noise&quot;</span> );</div><div class="line">        wnd.<a class="code" href="classforge_1_1Window.htm#a5d3ed7b3fed2fb9d0f8ce0a44b487755">draw</a>(2, 3, 1, img,  <span class="stringliteral">&quot;Dynamic Perlin Noise&quot;</span> );</div><div class="line">        wnd.<a class="code" href="classforge_1_1Window.htm#a5d3ed7b3fed2fb9d0f8ce0a44b487755">draw</a>(2, 3, 2, img,  <span class="stringliteral">&quot;Dynamic Perlin Noise&quot;</span> );</div><div class="line">        wnd.<a class="code" href="classforge_1_1Window.htm#a5d3ed7b3fed2fb9d0f8ce0a44b487755">draw</a>(2, 2, 2, chart, <span class="stringliteral">&quot;Histogram of Noisy Image&quot;</span>);</div><div class="line">        wnd.<a class="code" href="classforge_1_1Window.htm#a5d3ed7b3fed2fb9d0f8ce0a44b487755">draw</a>(2, 2, 3, chart, <span class="stringliteral">&quot;Histogram of Noisy Image&quot;</span>);</div><div class="line"></div><div class="line">        wnd.<a name="a23"></a><a class="code" href="classforge_1_1Window.htm#ac236527803a9ed5b5a908d2014f9e1ab">swapBuffers</a>();</div><div class="line">    } <span class="keywordflow">while</span>(!wnd.<a name="a24"></a><a class="code" href="classforge_1_1Window.htm#a800cef45e6604024ba71700cf036baae">close</a>());</div><div class="line"></div><div class="line">    releaseGLBuffer(handles[0]);</div><div class="line">    releaseGLBuffer(handles[1]);</div><div class="line">    releaseGLBuffer(handles[2]);</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">float</span> interp(<span class="keywordtype">float</span> x0, <span class="keywordtype">float</span> x1, <span class="keywordtype">float</span> alpha)</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> x0 * (1 - alpha) + alpha * x1;</div><div class="line">}</div><div class="line"></div><div class="line">PerlinNoise::PerlinNoise()</div><div class="line">{</div><div class="line">    std::srand(std::time(0));</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> i=0; i &lt; IMGW; i++)</div><div class="line">    {</div><div class="line">        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> j=0; j &lt; IMGH; j++)</div><div class="line">        {</div><div class="line">            base[i][j] = std::rand()/(float)(RAND_MAX);</div><div class="line">            perlin[i][j] = 0;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordtype">float</span> persistence = 0.5f;</div><div class="line">    <span class="keywordtype">float</span> amp  = 1.0f;</div><div class="line">    <span class="keywordtype">float</span> tamp = 0.0f;</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> octave=6; octave&gt;=0; --octave)</div><div class="line">    {</div><div class="line">        <span class="keywordtype">int</span> period = 1 &lt;&lt; octave;</div><div class="line">        <span class="keywordtype">float</span> freq = 1.0f / period;</div><div class="line"></div><div class="line">        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> i=0; i &lt; IMGW; i++)</div><div class="line">        {</div><div class="line">            <span class="keywordtype">int</span> si0 = (i/period) * period;</div><div class="line">            <span class="keywordtype">int</span> si1 = (si0 + period) % IMGW;</div><div class="line">            <span class="keywordtype">float</span> hblend = (i - si0) * freq;</div><div class="line"></div><div class="line">            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> j=0; j &lt; IMGH; j++)</div><div class="line">            {</div><div class="line">                <span class="keywordtype">int</span> sj0 = (j/period) * period;</div><div class="line">                <span class="keywordtype">int</span> sj1 = (sj0 + period) % IMGH;</div><div class="line">                <span class="keywordtype">float</span> vblend = (j - sj0) * freq;</div><div class="line"></div><div class="line">                <span class="keywordtype">float</span> top = interp(base[si0][sj0], base[si1][sj0], hblend);</div><div class="line">                <span class="keywordtype">float</span> bot = interp(base[si0][sj1], base[si1][sj1], hblend);</div><div class="line"></div><div class="line">                perlin[i][j] += (amp * interp(top, bot, vblend));</div><div class="line">            }</div><div class="line">        }</div><div class="line">        tamp += amp;</div><div class="line">        amp *= persistence;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> i=0; i &lt; IMGW; i++)</div><div class="line">        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> j=0; j &lt; IMGH; j++)</div><div class="line">            perlin[i][j] /= tamp;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">float</span> PerlinNoise::noise(<span class="keywordtype">float</span> u, <span class="keywordtype">float</span> v)</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> perlin[(unsigned)(IMGW*u)][(unsigned)(IMGH*v)];</div><div class="line">}</div><div class="line"></div><div class="line">Bitmap createBitmap(<span class="keywordtype">unsigned</span> w, <span class="keywordtype">unsigned</span> h)</div><div class="line">{</div><div class="line">    Bitmap retVal;</div><div class="line">    retVal.width = w;</div><div class="line">    retVal.height= h;</div><div class="line">    retVal.ptr   = <span class="keyword">new</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>[4*w*h];</div><div class="line">    <span class="keywordflow">return</span> retVal;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">void</span> destroyBitmap(Bitmap&amp; bmp)</div><div class="line">{</div><div class="line">    <span class="keyword">delete</span>[] bmp.ptr;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">void</span> kernel(Bitmap&amp; bmp)</div><div class="line">{</div><div class="line">    PerlinNoise perlin;</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> y=0; y&lt;bmp.height; ++y) {</div><div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> x=0; x&lt;bmp.width; ++x) {</div><div class="line">            <span class="keywordtype">int</span> offset  = x + y * bmp.width;</div><div class="line"></div><div class="line">            <span class="keywordtype">float</span> u = x/(float)(bmp.width);</div><div class="line">            <span class="keywordtype">float</span> v = y/(float)(bmp.height);</div><div class="line"></div><div class="line">            <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> noiseVal = 255 * perlin.noise(u, v);</div><div class="line">            bmp.ptr[offset*4 + 0]   = noiseVal;</div><div class="line">            bmp.ptr[offset*4 + 1]   = noiseVal;</div><div class="line">            bmp.ptr[offset*4 + 2]   = noiseVal;</div><div class="line">            bmp.ptr[offset*4 + 3]   = 255;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">void</span> populateBins(Bitmap&amp; bmp, <span class="keywordtype">int</span> *hist_array, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> nbins, <span class="keywordtype">float</span> *hist_cols)</div><div class="line">{</div><div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> y=0; y&lt;bmp.height; ++y) {</div><div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> x=0; x&lt;bmp.width; ++x) {</div><div class="line">            <span class="keywordtype">int</span> offset  = x + y * bmp.width;</div><div class="line">            <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> noiseVal = bmp.ptr[offset*4];</div><div class="line">            <span class="keywordtype">unsigned</span> idx = (int)((<span class="keywordtype">float</span>)noiseVal/255.f * nbins);</div><div class="line">            hist_array[idx]++;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> b=0; b&lt;nbins; ++b) {</div><div class="line">        hist_cols[3*b+0] = std::rand()/(float)RAND_MAX;</div><div class="line">        hist_cols[3*b+1] = std::rand()/(float)RAND_MAX;</div><div class="line">        hist_cols[3*b+2] = std::rand()/(float)RAND_MAX;</div><div class="line">    }</div><div class="line">}</div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Thu May 18 2017 10:55:57 for Forge by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
