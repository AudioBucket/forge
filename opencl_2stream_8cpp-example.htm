<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Forge: opencl/stream.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="forge.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Forge
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('opencl_2stream_8cpp-example.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">opencl/stream.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div><div class="line"><span class="comment"> * Copyright (c) 2015-2019, ArrayFire</span></div><div class="line"><span class="comment"> * All rights reserved.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div><div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div><div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div><div class="line"><span class="comment"> ********************************************************/</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="forge_8h.htm">forge.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &quot;cl_helpers.h&quot;</span></div><div class="line"><span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;ctime&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;iterator&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using namespace </span>cl;</div><div class="line"><span class="keyword">using namespace </span>std;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> DIMX = 640;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> DIMY = 480;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">float</span> MINIMUM = 1.0f;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">float</span> MAXIMUM = 20.f;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">float</span> STEP    = 2.0f;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">int</span> NELEMS    = (MAXIMUM-MINIMUM+1)/STEP;</div><div class="line"></div><div class="line"><span class="preprocessor">#define USE_FORGE_OPENCL_COPY_HELPERS</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="ComputeCopy_8h.htm">ComputeCopy.h</a>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> std::string streamKernel =</div><div class="line">R<span class="stringliteral">&quot;EOK(</span></div><div class="line"><span class="stringliteral">constant float AF_BLUE[4] = {0.0588f , 0.1137f , 0.2745f , 1.0f};</span></div><div class="line"><span class="stringliteral">constant float AF_ORANGE[4] = {0.8588f , 0.6137f , 0.0745f , 1.0f};</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">kernel</span></div><div class="line"><span class="stringliteral">void genColorsKernel(global float* colors, int NELEMS)</span></div><div class="line"><span class="stringliteral">{</span></div><div class="line"><span class="stringliteral">    const size_t nelems = NELEMS * NELEMS * NELEMS;</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">    int i = get_global_id(0);</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">    if (i&lt;nelems) {</span></div><div class="line"><span class="stringliteral">        if (i%2==0) {</span></div><div class="line"><span class="stringliteral">            colors[3*i+0] = AF_ORANGE[0];</span></div><div class="line"><span class="stringliteral">            colors[3*i+1] = AF_ORANGE[1];</span></div><div class="line"><span class="stringliteral">            colors[3*i+2] = AF_ORANGE[2];</span></div><div class="line"><span class="stringliteral">        } else {</span></div><div class="line"><span class="stringliteral">            colors[3*i+0] = AF_BLUE[0];</span></div><div class="line"><span class="stringliteral">            colors[3*i+1] = AF_BLUE[1];</span></div><div class="line"><span class="stringliteral">            colors[3*i+2] = AF_BLUE[2];</span></div><div class="line"><span class="stringliteral">        }</span></div><div class="line"><span class="stringliteral">    }</span></div><div class="line"><span class="stringliteral">}</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">kernel</span></div><div class="line"><span class="stringliteral">void pointGenKernel(global float* points, global float* dirs, int nBBS0,</span></div><div class="line"><span class="stringliteral">                    int NELEMS, float MINIMUM, float STEP)</span></div><div class="line"><span class="stringliteral">{</span></div><div class="line"><span class="stringliteral">    int k = get_group_id(0) / nBBS0;</span></div><div class="line"><span class="stringliteral">    int i = get_local_size(0) * (get_group_id(0)-k*nBBS0) + get_local_id(0);</span></div><div class="line"><span class="stringliteral">    int j = get_global_id(1);</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">    if (i&lt;NELEMS &amp;&amp; j&lt;NELEMS &amp;&amp; k&lt;NELEMS) {</span></div><div class="line"><span class="stringliteral">        float x = MINIMUM + i*STEP;</span></div><div class="line"><span class="stringliteral">        float y = MINIMUM + j*STEP;</span></div><div class="line"><span class="stringliteral">        float z = MINIMUM + k*STEP;</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">        int id = i + j * NELEMS + k * NELEMS*NELEMS;</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">        points[3*id+0] = x;</span></div><div class="line"><span class="stringliteral">        points[3*id+1] = y;</span></div><div class="line"><span class="stringliteral">        points[3*id+2] = z;</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral">        dirs[3*id+0] = x-10.f;</span></div><div class="line"><span class="stringliteral">        dirs[3*id+1] = y-10.f;</span></div><div class="line"><span class="stringliteral">        dirs[3*id+2] = z-10.f;</span></div><div class="line"><span class="stringliteral">    }</span></div><div class="line"><span class="stringliteral">}</span></div><div class="line"><span class="stringliteral">)EOK&quot;;</span></div><div class="line"><span class="stringliteral"></span></div><div class="line"><span class="stringliteral"></span><span class="keyword">inline</span> <span class="keywordtype">int</span> divup(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b)</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span> (a+b-1)/b;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">void</span> generatePoints(Buffer&amp; points, Buffer &amp;dirs, Buffer&amp; colors,</div><div class="line">                    CommandQueue&amp; queue, Device&amp; device)</div><div class="line">{</div><div class="line">    <span class="keyword">static</span> <span class="keywordtype">bool</span> compileFlag = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> cl::Program prog;</div><div class="line">    <span class="keyword">static</span> cl::Kernel  pointGenKernel;</div><div class="line">    <span class="keyword">static</span> cl::Kernel  colorsKernel;</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (compileFlag) {</div><div class="line">        <span class="keywordflow">try</span> {</div><div class="line">            prog = cl::Program(queue.getInfo&lt;CL_QUEUE_CONTEXT&gt;(), streamKernel, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">            std::vector&lt;cl::Device&gt; devs;</div><div class="line">            devs.push_back(device);</div><div class="line">            prog.build(devs);</div><div class="line"></div><div class="line">            pointGenKernel = cl::Kernel(prog, <span class="stringliteral">&quot;pointGenKernel&quot;</span>);</div><div class="line">            colorsKernel   = cl::Kernel(prog, <span class="stringliteral">&quot;genColorsKernel&quot;</span>);</div><div class="line">        } <span class="keywordflow">catch</span> (cl::Error err) {</div><div class="line">            std::cout &lt;&lt; <span class="stringliteral">&quot;Compile Errors: &quot;</span> &lt;&lt; std::endl;</div><div class="line">            std::cout &lt;&lt; err.what() &lt;&lt; err.err() &lt;&lt; std::endl;</div><div class="line">            std::cout &lt;&lt; prog.getBuildInfo&lt;CL_PROGRAM_BUILD_LOG&gt;(device) &lt;&lt; std::endl;</div><div class="line">            exit(255);</div><div class="line">        }</div><div class="line">        std::cout&lt;&lt; <span class="stringliteral">&quot;Kernels compiled successfully&quot;</span> &lt;&lt; std::endl;</div><div class="line">        compileFlag = <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> NDRange local(8, 8);</div><div class="line">    <span class="keywordtype">int</span> blk_x = divup(NELEMS, local[0]);</div><div class="line">    <span class="keywordtype">int</span> blk_y = divup(NELEMS, local[1]);</div><div class="line"></div><div class="line">    NDRange global(NELEMS * local[0] * blk_x, local[1] * blk_y);</div><div class="line"></div><div class="line">    pointGenKernel.setArg(0, points);</div><div class="line">    pointGenKernel.setArg(1, dirs);</div><div class="line">    pointGenKernel.setArg(2, blk_x);</div><div class="line">    pointGenKernel.setArg(3, NELEMS);</div><div class="line">    pointGenKernel.setArg(4, MINIMUM);</div><div class="line">    pointGenKernel.setArg(5, STEP);</div><div class="line">    queue.enqueueNDRangeKernel(pointGenKernel, cl::NullRange, global, local);</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> numElems = NELEMS*NELEMS*NELEMS;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> NDRange thrds(64, 1);</div><div class="line">    NDRange glob(thrds[0] * divup(numElems, thrds[0]), thrds[1]);</div><div class="line"></div><div class="line">    colorsKernel.setArg(0, colors);</div><div class="line">    colorsKernel.setArg(1, NELEMS);</div><div class="line">    queue.enqueueNDRangeKernel(colorsKernel, cl::NullRange, glob, thrds);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    <span class="keywordflow">try</span> {</div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * First Forge call should be a window creation call</span></div><div class="line"><span class="comment">         * so that necessary OpenGL context is created for any</span></div><div class="line"><span class="comment">         * other forge::* object to be created successfully</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <a name="_a0"></a><a class="code" href="classforge_1_1Window.htm">forge::Window</a> wnd(DIMX, DIMY, <span class="stringliteral">&quot;3D Vector Field Demo&quot;</span>);</div><div class="line">        wnd.<a name="a1"></a><a class="code" href="classforge_1_1Window.htm#afdc06d5b1652d4ae491be94d3edc5a6f">makeCurrent</a>();</div><div class="line"></div><div class="line">        <a name="_a2"></a><a class="code" href="classforge_1_1Chart.htm">forge::Chart</a> chart(<a name="a3"></a><a class="code" href="defines_8h.htm#af4e160ad397b0c0d8271fab83e2441dba5209ecc54f589ec8cf18f2ffd750648c">FG_CHART_3D</a>);</div><div class="line">        chart.<a name="a4"></a><a class="code" href="classforge_1_1Chart.htm#a762125729a5894b7fb533fc4151e8c4e">setAxesLimits</a>(MINIMUM-1.0f, MAXIMUM,</div><div class="line">                            MINIMUM-1.0f, MAXIMUM,</div><div class="line">                            MINIMUM-1.0f, MAXIMUM);</div><div class="line">        chart.<a name="a5"></a><a class="code" href="classforge_1_1Chart.htm#aa0fe71ff5413a2e8a4bcfc64538ef074">setAxesTitles</a>(<span class="stringliteral">&quot;x-axis&quot;</span>, <span class="stringliteral">&quot;y-axis&quot;</span>, <span class="stringliteral">&quot;z-axis&quot;</span>);</div><div class="line"></div><div class="line">        <span class="keywordtype">int</span> numElems = NELEMS*NELEMS*NELEMS;</div><div class="line">        <a name="_a6"></a><a class="code" href="classforge_1_1VectorField.htm">forge::VectorField</a> field = chart.<a name="a7"></a><a class="code" href="classforge_1_1Chart.htm#a56d43faa368874b2e13f718546882e32">vectorField</a>(numElems, <a name="a8"></a><a class="code" href="namespaceforge.htm#acfe99d230e216901bd782cc580e4e815a82ea90203678bdd0b547068f0a76524b">forge::f32</a>);</div><div class="line">        field.<a name="a9"></a><a class="code" href="classforge_1_1VectorField.htm#a8e14e7f09511e4042e65b78e5b0ba0fc">setColor</a>(0.f, 1.f, 0.f, 1.f);</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Helper function to create a CLGL interop context.</span></div><div class="line"><span class="comment">         * This function checks for if the extension is available</span></div><div class="line"><span class="comment">         * and creates the context on the appropriate device.</span></div><div class="line"><span class="comment">         * Note: context and queue are defined in cl_helpers.h</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        context = createCLGLContext(wnd);</div><div class="line">        Device device = context.getInfo&lt;CL_CONTEXT_DEVICES&gt;()[0];</div><div class="line">        queue = CommandQueue(context, device);</div><div class="line"></div><div class="line">        cl::Buffer points(context, CL_MEM_READ_WRITE, <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>)*3*numElems);</div><div class="line">        cl::Buffer colors(context, CL_MEM_READ_WRITE, <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>)*3*numElems);</div><div class="line">        cl::Buffer dirs(context, CL_MEM_READ_WRITE, <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>)*3*numElems);</div><div class="line"></div><div class="line">        <a name="_a10"></a><a class="code" href="structGfxHandle.htm">GfxHandle</a>* handles[3];</div><div class="line">        createGLBuffer(&amp;handles[0], field.<a name="a11"></a><a class="code" href="classforge_1_1VectorField.htm#aaa2e743d9764f9443bf4b8ea62805de8">vertices</a>(), <a name="a12"></a><a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>);</div><div class="line">        createGLBuffer(&amp;handles[1], field.<a name="a13"></a><a class="code" href="classforge_1_1VectorField.htm#aa579e8fd6fabcf3b08ff2d9ae6f554c6">colors</a>(), <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>);</div><div class="line">        createGLBuffer(&amp;handles[2], field.<a name="a14"></a><a class="code" href="classforge_1_1VectorField.htm#a3f78ce4ad1fe8cc3e73d2f5feeef9a77">directions</a>(), <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>);</div><div class="line"></div><div class="line">        generatePoints(points, dirs, colors, queue, device);</div><div class="line"></div><div class="line">        copyToGLBuffer(handles[0], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)points(), field.<a name="a15"></a><a class="code" href="classforge_1_1VectorField.htm#a0a7be986ade6c80d40292308006af406">verticesSize</a>());</div><div class="line">        copyToGLBuffer(handles[1], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)colors(),   field.<a name="a16"></a><a class="code" href="classforge_1_1VectorField.htm#a3012cc13e7ec06d223e5cf9dc21e8cd4">colorsSize</a>());</div><div class="line">        copyToGLBuffer(handles[2], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)dirs(), field.<a name="a17"></a><a class="code" href="classforge_1_1VectorField.htm#a0d219f16e50ec29802afb72f239ee7dc">directionsSize</a>());</div><div class="line"></div><div class="line">        <span class="keywordflow">do</span> {</div><div class="line">            wnd.<a name="a18"></a><a class="code" href="classforge_1_1Window.htm#a5d3ed7b3fed2fb9d0f8ce0a44b487755">draw</a>(chart);</div><div class="line">        } <span class="keywordflow">while</span>(!wnd.<a name="a19"></a><a class="code" href="classforge_1_1Window.htm#a800cef45e6604024ba71700cf036baae">close</a>());</div><div class="line"></div><div class="line">        releaseGLBuffer(handles[0]);</div><div class="line">        releaseGLBuffer(handles[1]);</div><div class="line">        releaseGLBuffer(handles[2]);</div><div class="line"></div><div class="line">    } <span class="keywordflow">catch</span> (<a name="_a20"></a><a class="code" href="classforge_1_1Error.htm">forge::Error</a> err) {</div><div class="line">        std::cout &lt;&lt; err.<a name="a21"></a><a class="code" href="classforge_1_1Error.htm#aff06f49065b54a8a86e02e9a2441a8ba">what</a>() &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; err.<a name="a22"></a><a class="code" href="classforge_1_1Error.htm#a2024c05f6fc6a9077fe66d857e22fcd7">err</a>() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;</div><div class="line">    } <span class="keywordflow">catch</span> (cl::Error err) {</div><div class="line">        std::cout &lt;&lt; err.what() &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; err.err() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Sat Sep 10 2016 11:16:13 for Forge by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
