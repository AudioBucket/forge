<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Forge: cpu/bubblechart.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="forge.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Forge
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('cpu_2bubblechart_8cpp-example.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">cpu/bubblechart.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/*******************************************************</span></div><div class="line"><span class="comment"> * Copyright (c) 2015-2019, ArrayFire</span></div><div class="line"><span class="comment"> * All rights reserved.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This file is distributed under 3-clause BSD license.</span></div><div class="line"><span class="comment"> * The complete license agreement can be obtained at:</span></div><div class="line"><span class="comment"> * http://arrayfire.com/licenses/BSD-3-Clause</span></div><div class="line"><span class="comment"> ********************************************************/</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="forge_8h.htm">forge.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#define USE_FORGE_CPU_COPY_HELPERS</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="ComputeCopy_8h.htm">ComputeCopy.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;complex&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;random&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;iterator&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> DIMX = 1000;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> DIMY = 800;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keywordtype">float</span> FRANGE_START = 0.f;</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">float</span> FRANGE_END = 2.f * 3.1415926f;</div><div class="line"></div><div class="line"><span class="keyword">using namespace </span>std;</div><div class="line"><span class="keywordtype">void</span> map_range_to_vec_vbo(<span class="keywordtype">float</span> range_start, <span class="keywordtype">float</span> range_end, <span class="keywordtype">float</span> dx,</div><div class="line">                          std::vector&lt;float&gt; &amp;vec,</div><div class="line">                          <span class="keywordtype">float</span> (*map) (<span class="keywordtype">float</span>))</div><div class="line">{</div><div class="line">    <span class="keywordflow">if</span>(range_start &gt; range_end &amp;&amp; dx &gt; 0) <span class="keywordflow">return</span>;</div><div class="line">    <span class="keywordflow">for</span>(<span class="keywordtype">float</span> i=range_start; i &lt; range_end; i+=dx){</div><div class="line">        vec.push_back(i);</div><div class="line">        vec.push_back((*map)(i));</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">void</span>)</div><div class="line">{</div><div class="line">    std::vector&lt;float&gt; cosData;</div><div class="line">    std::vector&lt;float&gt; tanData;</div><div class="line"></div><div class="line">    map_range_to_vec_vbo(FRANGE_START, FRANGE_END, 0.1f, cosData, &amp;cosf);</div><div class="line">    map_range_to_vec_vbo(FRANGE_START, FRANGE_END, 0.1f, tanData, &amp;tanf);</div><div class="line"></div><div class="line">    std::random_device r;</div><div class="line"></div><div class="line">    std::default_random_engine e1(r());</div><div class="line">    std::mt19937_64 gen(r());</div><div class="line"></div><div class="line">    std::uniform_int_distribution&lt;int&gt; uDist(20, 80);</div><div class="line">    std::uniform_real_distribution&lt;float&gt; cDist(0.2, 0.6);</div><div class="line">    std::uniform_real_distribution&lt;float&gt; fDist(0.4, 0.6);</div><div class="line"></div><div class="line">    <span class="keyword">auto</span> clr = std::bind(cDist, gen);</div><div class="line">    <span class="keyword">auto</span> rnd = std::bind(uDist, e1);</div><div class="line">    <span class="keyword">auto</span> alp = std::bind(fDist, gen);</div><div class="line"></div><div class="line">    std::vector&lt;float&gt; colors(3*tanData.size());</div><div class="line">    std::vector&lt;float&gt; alphas(tanData.size());</div><div class="line">    std::vector&lt;float&gt; radii(tanData.size());</div><div class="line"></div><div class="line">    std::generate(colors.begin(), colors.end(), clr);</div><div class="line">    std::generate(radii.begin(), radii.end(), rnd);</div><div class="line">    std::generate(alphas.begin(), alphas.end(), alp);</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * First Forge call should be a window creation call</span></div><div class="line"><span class="comment">     * so that necessary OpenGL context is created for any</span></div><div class="line"><span class="comment">     * other forge::* object to be created successfully</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <a name="_a0"></a><a class="code" href="classforge_1_1Window.htm">forge::Window</a> wnd(DIMX, DIMY, <span class="stringliteral">&quot;Bubble chart with Transparency Demo&quot;</span>);</div><div class="line">    wnd.makeCurrent();</div><div class="line"></div><div class="line">    <a name="_a1"></a><a class="code" href="classforge_1_1Chart.htm">forge::Chart</a> chart(<a name="a2"></a><a class="code" href="defines_8h.htm#af4e160ad397b0c0d8271fab83e2441dbab26b9da5cbdafc88a47bbe067b74924c">FG_CHART_2D</a>);</div><div class="line">    chart.<a name="a3"></a><a class="code" href="classforge_1_1Chart.htm#a88e6960288c03aecbc6d47ef92cbec02">setAxesLimits</a>(FRANGE_START, FRANGE_END, -1.0f, 1.0f);</div><div class="line"></div><div class="line">    <span class="comment">/* Create several plot objects which creates the necessary</span></div><div class="line"><span class="comment">     * vertex buffer objects to hold the different plot types</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <a name="_a4"></a><a class="code" href="classforge_1_1Plot.htm">forge::Plot</a> plt1 = chart.<a name="a5"></a><a class="code" href="classforge_1_1Chart.htm#a8e7caa3cd226b829bd4c1ca5a938bec6">plot</a>(cosData.size()/2, <a name="a6"></a><a class="code" href="namespaceforge.htm#acfe99d230e216901bd782cc580e4e815a82ea90203678bdd0b547068f0a76524b">forge::f32</a>,</div><div class="line">                               <a name="a7"></a><a class="code" href="defines_8h.htm#a3bc618792ca52006bf96800b9bd4050daf73d0173ca8c7039427474c4dbbb7dec">FG_PLOT_LINE</a>, <a name="a8"></a><a class="code" href="defines_8h.htm#a4e31a5f495100699e2478393e158d971ab0caed65a273eff83028976846adf44b">FG_MARKER_TRIANGLE</a>); <span class="comment">//or specify a specific plot type</span></div><div class="line">    <a class="code" href="classforge_1_1Plot.htm">forge::Plot</a> plt2 = chart.<a class="code" href="classforge_1_1Chart.htm#a8e7caa3cd226b829bd4c1ca5a938bec6">plot</a>(tanData.size()/2, <a class="code" href="namespaceforge.htm#acfe99d230e216901bd782cc580e4e815a82ea90203678bdd0b547068f0a76524b">forge::f32</a>,</div><div class="line">                               <a class="code" href="defines_8h.htm#a3bc618792ca52006bf96800b9bd4050daf73d0173ca8c7039427474c4dbbb7dec">FG_PLOT_LINE</a>, <a name="a9"></a><a class="code" href="defines_8h.htm#a4e31a5f495100699e2478393e158d971a69eb2b5b6ebb3f139a17b9195606327c">FG_MARKER_CIRCLE</a>); <span class="comment">//last parameter specifies marker shape</span></div><div class="line"></div><div class="line">    <span class="comment">/* Set plot colors */</span></div><div class="line">    plt1.<a name="a10"></a><a class="code" href="classforge_1_1Plot.htm#a8e14e7f09511e4042e65b78e5b0ba0fc">setColor</a>(<a name="a11"></a><a class="code" href="defines_8h.htm#aa65cea65b505b5bb5946acdcb3e6bc38aa2cf8cb5bc8e973e30ac349a20b3e965">FG_RED</a>);</div><div class="line">    plt2.<a class="code" href="classforge_1_1Plot.htm#a8e14e7f09511e4042e65b78e5b0ba0fc">setColor</a>(<a name="a12"></a><a class="code" href="defines_8h.htm#aa65cea65b505b5bb5946acdcb3e6bc38a2d9fc9319228a105fbd300d9b73f9f2e">FG_GREEN</a>);            <span class="comment">//use a forge predefined color</span></div><div class="line">    <span class="comment">/* Set plot legends */</span></div><div class="line">    plt1.<a name="a13"></a><a class="code" href="classforge_1_1Plot.htm#a841659a9bd508773863b33efaa4e2cf5">setLegend</a>(<span class="stringliteral">&quot;Cosine&quot;</span>);</div><div class="line">    plt2.<a class="code" href="classforge_1_1Plot.htm#a841659a9bd508773863b33efaa4e2cf5">setLegend</a>(<span class="stringliteral">&quot;Tangent&quot;</span>);</div><div class="line">    <span class="comment">/* set plot global marker size */</span></div><div class="line">    plt1.<a name="a14"></a><a class="code" href="classforge_1_1Plot.htm#a8e8008385b6d430b4defe1d5082dbd7d">setMarkerSize</a>(20);</div><div class="line">    <span class="comment">/* copy your data into the opengl buffer object exposed by</span></div><div class="line"><span class="comment">     * forge::Plot class and then proceed to rendering.</span></div><div class="line"><span class="comment">     * To help the users with copying the data from compute</span></div><div class="line"><span class="comment">     * memory to display memory, Forge provides copy headers</span></div><div class="line"><span class="comment">     * along with the library to help with this task</span></div><div class="line"><span class="comment">     */</span></div><div class="line"></div><div class="line">    <a name="_a15"></a><a class="code" href="structGfxHandle.htm">GfxHandle</a>* handles[5];</div><div class="line"></div><div class="line">    <span class="comment">// create GL-CPU interop buffers</span></div><div class="line">    createGLBuffer(&amp;handles[0], plt1.<a name="a16"></a><a class="code" href="classforge_1_1Plot.htm#aaa2e743d9764f9443bf4b8ea62805de8">vertices</a>(), <a name="a17"></a><a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>);</div><div class="line">    createGLBuffer(&amp;handles[1], plt2.<a class="code" href="classforge_1_1Plot.htm#aaa2e743d9764f9443bf4b8ea62805de8">vertices</a>(), <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>);</div><div class="line">    createGLBuffer(&amp;handles[2], plt2.<a name="a18"></a><a class="code" href="classforge_1_1Plot.htm#aa579e8fd6fabcf3b08ff2d9ae6f554c6">colors</a>(), <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>);</div><div class="line">    createGLBuffer(&amp;handles[3], plt2.<a name="a19"></a><a class="code" href="classforge_1_1Plot.htm#a3faf73cbe698f91a8625565207e2b10e">alphas</a>(), <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>);</div><div class="line">    createGLBuffer(&amp;handles[4], plt2.<a name="a20"></a><a class="code" href="classforge_1_1Plot.htm#a993f32b67813ca0e17f846efad787f86">radii</a>(), <a class="code" href="ComputeCopy_8h.htm#adf8e136713c0691010d2bec6ba63e9cfa08d078104055dceac893e4a14c153b2c">FORGE_VERTEX_BUFFER</a>);</div><div class="line"></div><div class="line">    <span class="comment">// copy the data from compute buffer to graphics buffer</span></div><div class="line">    copyToGLBuffer(handles[0], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)cosData.data(), plt1.<a name="a21"></a><a class="code" href="classforge_1_1Plot.htm#a0a7be986ade6c80d40292308006af406">verticesSize</a>());</div><div class="line">    copyToGLBuffer(handles[1], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)tanData.data(), plt2.<a class="code" href="classforge_1_1Plot.htm#a0a7be986ade6c80d40292308006af406">verticesSize</a>());</div><div class="line"></div><div class="line">    <span class="comment">/* update color value for tan graph */</span></div><div class="line">    copyToGLBuffer(handles[2], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)colors.data(), plt2.<a name="a22"></a><a class="code" href="classforge_1_1Plot.htm#a3012cc13e7ec06d223e5cf9dc21e8cd4">colorsSize</a>());</div><div class="line">    <span class="comment">/* update alpha values for tan graph */</span></div><div class="line">    copyToGLBuffer(handles[3], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)alphas.data(), plt2.<a name="a23"></a><a class="code" href="classforge_1_1Plot.htm#a13f1bea64fb3332a0b0dfa057090a7ee">alphasSize</a>());</div><div class="line">    <span class="comment">/* update marker sizes for tan graph markers */</span></div><div class="line">    copyToGLBuffer(handles[4], (<a class="code" href="ComputeCopy_8h.htm#a160b6c9800d06caf50586d67439790c3">ComputeResourceHandle</a>)radii.data(), plt2.<a name="a24"></a><a class="code" href="classforge_1_1Plot.htm#a2ef8403d6d6f5cd533c9a5213109f461">radiiSize</a>());</div><div class="line"></div><div class="line">    <span class="keywordflow">do</span> {</div><div class="line">        wnd.draw(chart);</div><div class="line">    } <span class="keywordflow">while</span>(!wnd.close());</div><div class="line"></div><div class="line">    <span class="comment">// destroy GL-CPU Interop buffer</span></div><div class="line">    releaseGLBuffer(handles[0]);</div><div class="line">    releaseGLBuffer(handles[1]);</div><div class="line">    releaseGLBuffer(handles[2]);</div><div class="line">    releaseGLBuffer(handles[3]);</div><div class="line">    releaseGLBuffer(handles[4]);</div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Thu May 18 2017 10:55:57 for Forge by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
